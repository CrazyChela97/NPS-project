# fun='event',
title="Cumulative Incidence Curve for Lung Cancer Survival")
cumulative_incidence <- 1 - fit$surv
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
fun='event',
title="Cumulative Incidence Curve for Lung Cancer Survival")
H <- fit$cumhaz
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
fun='cumhaz',
title="Cumulative Hazard Curve for Lung Cancer Survival")
fit.age <- survfit(Surv(time, status) ~ age, data=lung)
ggsurvplot(fit.age, conf.int = F, risk.table.col = "strata", legend='none')
hist(lung$age, xlab='Age [years]', main='Histogram of age in Lung Cancer Data')
summary(lung$age)
lung$agecat70 <- cut(lung$age, breaks=c(0, 70, Inf), labels=c("young", "old"))
fit.age <- survfit(Surv(time, status) ~ agecat70, data=lung)
ggsurvplot(fit.age, conf.int = T,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
legend.labs=c("Young (<= 70)","Old (> 70)"), legend.title="Age class",
palette=c("darkblue","cyan3"),
title="Kaplan-Meier Curves by age class for Lung Cancer Survival")
log_rank_test <- survdiff(Surv(time, status) ~ agecat70, data=lung)
log_rank_test
hazard_ratio <- (log_rank_test$obs[1]/log_rank_test$exp[1])/(log_rank_test$obs[2]/log_rank_test$exp[2])
hazard_ratio
coxph(formula, data, method)
cox.age <- coxph(Surv(time, status) ~ age, data = lung)
cox.age
summary(cox.age)
plot(survfit(cox.age, data=lung),
col="darkorange2", lwd=2, lty=1,
xlab='Time [days]', ylab='Survival Probability',
main='Baseline estimated survival probability')
grid()
age_df <- with(lung,
data.frame(age = c(50,65,80) )
)
fit.age <- survfit(cox.age, newdata = age_df)
fit.age
plot(fit.age, conf.int=T,
col=c("dodgerblue2","navy","darkmagenta"), lwd=2, lty=1,
xlab='Time [days]', ylab='Survival Probability',
main='Adjusted Survival Probability Plot')
grid()
legend('topright', c("Age = 50", "Age = 65", "Age = 80"),
lty=c(1,1,1), lwd=c(2,2,2), col=c("dodgerblue2","navy","darkmagenta"))
glimpse(lung)
lung$sex <- ifelse(lung$sex==1,'Male','Female')
lung$sex <- as.factor(lung$sex)
# Create dummy for categorical variables
lung$sex <- ifelse(lung$sex==1,'Male','Female')
lung$sex <- as.factor(lung$sex)
View(lung)
glimpse(lung)
lung$sex <- ifelse(lung$sex==1,'Male','Female')
lung$sex <- as.factor(lung$sex)
mod.cox <- coxph(Surv(time, status) ~ age + sex + ph.karno + wt.loss, data =  lung)
summary(mod.cox)
library(rgl)
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_hooks$set(webgl = hook_webgl)
ggplot2::theme_set(ggplot2::theme_bw())
library(survival)
library(survminer)
library(dplyr)
library(ggplot2)
library(knitr)
library(broom)
lung$ID <- factor(seq(1:nrow(lung)))
lung$time_y <- lung$time / 365
lung$status_fact <- factor(lung$status, labels = (c('Censor', 'Event')))
lung_subs <- head(lung)
ggplot(data=lung_subs,aes(x=ID,y=time_y)) +
geom_bar(stat='identity',width=0.2) +
geom_point(aes(color=status_fact,shape=status_fact),size=6) +
coord_flip()
head(Surv(lung$time, lung$status==2))
# R places a + if there is censoring
fit <- survfit(Surv(time, status==2) ~ 1, data = lung)
df_KM <- lung %>%
as_tibble() %>%
select(time, status) %>%
mutate(status=if_else(status==2,"death", "censored")) %>%
arrange(time)
df_KM_enriched <- df_KM %>%
count(time,status,name = "n.event")
n_risk_manual <- numeric(n_distinct(df_KM_enriched$time))
n_censored_manual <- df_KM %>%
group_by(time) %>%
summarise(n_censored_manual=sum(status=="censored")) %>%
pull(n_censored_manual)
n_event_manual <- df_KM %>%
group_by(time) %>%
summarise(n_event_manual=sum(status=="death")) %>%
pull(n_event_manual)
n_risk_manual[1] <- nrow(df_KM)
time_manual <- unique(df_KM_enriched$time)
for(i in 2:length(n_risk_manual)){
previous_t <- df_KM_enriched %>%
filter(time==time_manual[i-1])
n_death_previous_t <- pull(.data = filter(previous_t,status=="death"), n.event)
n_death_previous_t <- ifelse(length(n_death_previous_t)==0,0,n_death_previous_t)
n_censored_previous_t <- pull(.data = filter(previous_t,status=="censored"), n.event)
n_censored_previous_t <- ifelse(length(n_censored_previous_t)==0,0,n_censored_previous_t)
n_risk_manual[i] <- n_risk_manual[i-1]-n_death_previous_t-n_censored_previous_t
}
df_KM_fit <- distinct(df_KM, time) %>%
mutate(
n_risk = n_risk_manual,
n_censored = n_censored_manual,
n_event = n_event_manual,
h_est = (n_event ) / n_risk,
S_t = cumprod(1 - h_est), # or exp(-cumsum(h_est)) for Nelson-Aalen estimator
cumhaz=cumsum(h_est) # or -log(S_t)
)
summary(fit)
kable(head(tidy(fit),20))
surv_median(fit)
median_St<-fit$time[fit$surv<=0.5][1]
median_St
plot(fit, conf.int = T, xlab='Time [days]', ylab = 'Survival Probability', col='red',
main="Kaplan-Meier Curve for Lung Cancer Survival")
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
title="Kaplan-Meier Curve for Lung Cancer Survival")
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
title="Kaplan-Meier Curve for Lung Cancer Survival")
cumulative_incidence <- 1 - fit$surv
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
fun='event',
title="Cumulative Incidence Curve for Lung Cancer Survival")
H <- fit$cumhaz
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
fun='cumhaz',
title="Cumulative Hazard Curve for Lung Cancer Survival")
fit.age <- survfit(Surv(time, status) ~ age, data=lung)
ggsurvplot(fit.age, conf.int = F, risk.table.col = "strata", legend='none')
hist(lung$age, xlab='Age [years]', main='Histogram of age in Lung Cancer Data')
summary(lung$age)
lung$agecat70 <- cut(lung$age, breaks=c(0, 70, Inf), labels=c("young", "old"))
fit.age <- survfit(Surv(time, status) ~ agecat70, data=lung)
ggsurvplot(fit.age, conf.int = T,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
legend.labs=c("Young (<= 70)","Old (> 70)"), legend.title="Age class",
palette=c("darkblue","cyan3"),
title="Kaplan-Meier Curves by age class for Lung Cancer Survival")
log_rank_test <- survdiff(Surv(time, status) ~ agecat70, data=lung)
log_rank_test
hazard_ratio <- (log_rank_test$obs[1]/log_rank_test$exp[1])/(log_rank_test$obs[2]/log_rank_test$exp[2])
hazard_ratio
coxph(formula, data, method)
cox.age <- coxph(Surv(time, status) ~ age, data = lung)
cox.age
View(lung)
summary(cox.age)
plot(survfit(cox.age, data=lung),
col="darkorange2", lwd=2, lty=1,
xlab='Time [days]', ylab='Survival Probability',
main='Baseline estimated survival probability')
grid()
age_df <- with(lung,
data.frame(age = c(50,65,80) )
)
fit.age <- survfit(cox.age, newdata = age_df)
fit.age
plot(fit.age, conf.int=T,
col=c("dodgerblue2","navy","darkmagenta"), lwd=2, lty=1,
xlab='Time [days]', ylab='Survival Probability',
main='Adjusted Survival Probability Plot')
grid()
legend('topright', c("Age = 50", "Age = 65", "Age = 80"),
lty=c(1,1,1), lwd=c(2,2,2), col=c("dodgerblue2","navy","darkmagenta"))
a <- ifelse(lung$sex==1,'Male','Female')
a
a <- as.factor(a)
a
glimpse(lung)
lung$sex <- ifelse(lung$sex==1,'Male','Female')
lung$sex <- as.factor(lung$sex)
mod.cox <- coxph(Surv(time, status) ~ age + sex + ph.karno + wt.loss, data =  lung)
summary(mod.cox)
ggforest(mod.cox, data=lung)
plot(survfit(mod.cox, data=lung),
col="darkorange2", lwd=2, lty=1,
xlab='Time [days]', ylab='Survival Probability',
main='Baseline estimated survival probability')
grid()
plot(predict(mod.cox), residuals(mod.cox, type='martingale'),
xlab='Fitted values', ylab='Martingale residuals', main='Residual Plot', las=1)
# Add a line for residual=0
abline(h=0, col='red')
# Fit a smoother for the points
lines(smooth.spline(predict(mod.cox), residuals(mod.cox, type='martingale')), col='blue')
cox_model_matrix <- model.matrix(mod.cox)
centered_model_matrix <- sweep(cox_model_matrix,MARGIN = 2,STATS = mod.cox$means,FUN = "-")
manual_linear_pred <- c(centered_model_matrix%*%mod.cox$coefficients)
bese_haz_est <- basehaz(mod.cox)
# Martingale residuals
basehaz_for_i <- Vectorize(function(t){
pos_haz <- which(t<=bese_haz_est$time)[1]
bese_haz_est$hazard[pos_haz]
})
obs_NA <- which(is.na(lung$wt.loss))
lung_no_NA <- lung[-obs_NA,]
martingale_res_manual <- (lung_no_NA$status-1)- basehaz_for_i(t=lung_no_NA$time)*exp(manual_linear_pred)
ggcoxdiagnostics(mod.cox, type = "martingale")
ggcoxdiagnostics(mod.cox, type = "deviance")
# Deviance residuals (Normalization of Martingale residuals) - - - - - - - -
ggcoxdiagnostics(mod.cox, type = "deviance")
deviance_res_manual <- sign(martingale_res_manual)*(-2*(martingale_res_manual+(lung_no_NA$status-1)*log((lung_no_NA$status-1)-martingale_res_manual)))^(1/2)
ggcoxdiagnostics(mod.cox, type = "schoenfeld")
df_4_schoenfeld <- lung %>%
tidyr::drop_na(age, sex, ph.karno, wt.loss) %>%
arrange(time)
df_4_schoenfeld_sub <- df_4_schoenfeld %>%
select(age, sex, ph.karno, wt.loss) %>%
mutate(sex=if_else(sex=="Male",1,0))
cox_coef <- mod.cox$coefficients
X_denom <- exp(data.matrix(df_4_schoenfeld_sub) %*% cox_coef)
X_num <-
sweep(
x = df_4_schoenfeld_sub,
MARGIN = 1,
STATS = X_denom,
FUN = "*"
)
X_bar <- matrix(nrow = nrow(X_num), ncol = ncol(X_num))
X_den <- numeric(nrow(X_num))
for(i in 1:nrow(X_num)){
time_instant <- df_4_schoenfeld$time[i]
risk_set <- which(time_instant<=df_4_schoenfeld$time)
X_bar[i,] <- colSums(X_num[risk_set,])
X_den[i] <- sum(X_denom[risk_set])
}
schoenfeld_calc <- df_4_schoenfeld_sub-sweep(X_bar,MARGIN = 1,STATS = X_den,FUN = "/")
schoenfeld_manual <- schoenfeld_calc[df_4_schoenfeld$status==2,]
sex.km <- survfit(Surv(time, status) ~ sex, data = lung[!is.na(lung$wt.loss) & !is.na(lung$ph.karno),])
plot(sex.km, fun='cloglog',
col=c("deeppink2","dodgerblue2"), lwd=2, lty=1,
ylab="log(-log(Survival Probability))")
grid()
legend('topleft', c("Female", "Male"),
lty=c(1,1), lwd=c(2,2), col=c("deeppink2","dodgerblue2"))
test.ph <- cox.zph(mod.cox)
test.ph
par(mfrow=c(2,2))
for(i in 1:4){
plot(test.ph[i])
abline(h=0, col='red')
}
ggcoxdiagnostics(mod.cox, type = "scaledsch")
mod.cox.strata <- coxph(Surv(time, status) ~ age + sex + strata(ph.karno) + wt.loss, data =  lung)
summary(mod.cox.strata)
test.ph.strata <- cox.zph(mod.cox.strata)
test.ph.strata
10*54/24
22.5+132.5
60/155^2
(0,4 - 0.387)/sqrt(0.0025)
(0,4 - 0.387)/sqrt(0.0025)
27.32+0.73
250/28.05
250/28.05^2
sqrt(0.3177417)
1.96*0.5637
8.9126+1.1048
8.9126-1.1048
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
rm(list=ls())
library(rio)
library(roahd)
library(MASS)
library(rgl)
library(DepthProc)
library(aplpack)
library(robustbase)
library(ISLR2)
library(car)
library(mgcv)
library(splines)
library(pbapply)
library(conformalInference)
library(splines)
library(plotrix)
library(fastDummies)
data = import("RegData.Rdata")
# We use data from 2016 & 2017 as training dataset for the models
# We then test the GOF of the model using 2018 data
test_data = data[which(data$Year == 2018), ]
train_data = data[which(data$Year == 2016 | data$Year == 2017), ]
# fitting model over training data
model_poly = lm(log_item ~ poly(TotalVolunteers,degree=8), data=train_data)
summary(model_poly)
# prediction made over test data
x.test = test_data$TotalVolunteers
y.test = test_data$log_item
x.grid = seq(range(x.test)[1], range(x.test)[2], by=1)
preds = predict(model_poly, list(TotalVolunteers = x.grid), se=T)
plot(x.test, y.test, xlim=range(x.grid), cex = 0.5, col="darkgrey ")
lines(x.grid, preds$fit ,lwd =2, col =" blue")
lm_train = lm.funs(intercept = T)$train.fun
lm_predict = lm.funs(intercept = T)$predict.fun
# Design Matrix with Regressors
dummies = dummy_cols(train_data, select_columns = c('EventType', 'Season'))
design_matrix = matrix(poly(x.train, degree=8), ncol=8)
design_matrix = cbind(design_matrix, dummies[ ,c(10, 12:14, 16:18)])
x.train = train_data$TotalVolunteers
y.train = train_data$log_item
x.test = test_data$TotalVolunteers
y.test = test_data$log_item
x.grid = seq(range(x.test)[1], range(x.test)[2], by=1)
lm_train = lm.funs(intercept = T)$train.fun
lm_predict = lm.funs(intercept = T)$predict.fun
# Design Matrix with Regressors
dummies = dummy_cols(train_data, select_columns = c('EventType', 'Season'))
design_matrix = matrix(poly(x.train, degree=8), ncol=8)
design_matrix = cbind(design_matrix, dummies[ ,c(10, 12:14, 16:18)])
design_matrix = as.matrix(design_matrix)
# Design Matrix of New Obs
dummies = dummy_cols(test_data, select_columns = c('EventType', 'Season'))
pred_grid = matrix(poly(x.test, degree=8, coefs = attr(poly(x.train, degree=8), "coefs")), ncol=8)
pred_grid = cbind(pred_grid, dummies[ ,c(10, 12:14, 16:18)])
pred_grid = as.matrix(pred_grid)
# GOF check
excluded = 0
for (i in 1:length(y.test)){
excluded = excluded + (y.test[i]<c_preds_poly$lo[i]) + (y.test[i]>c_preds_poly$up[i])
}
c_preds_poly = conformal.pred(design_matrix, y.train, pred_grid, alpha=0.05, verbose=T,
train.fun=lm_train, predict.fun=lm_predict, num.grid.pts = 200)
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
rm(list=ls())
# Packages ----------------------------------------------------------------
library(rio)
library(roahd)
library(rgl)
library(MASS)
library(rgl)
library(DepthProc)
library(hexbin)
library(packagefinder)
library(aplpack)
library(robustbase)
library(ISLR2)
library(car)
library(mgcv)
library(splines)
library(pbapply)
# Data Transformation -----------------------------------------------------
CleanUsa = import("CleanUsa.Rdata")
# View(CleanUsa)
for (i in 1:length(CleanUsa$EventType)) {
if(CleanUsa$EventType[i]=='Land (beach, shoreline and inland) Cleanup')
CleanUsa$EventType[i]='Land Cleanup'
if(CleanUsa$EventType[i]=='Watercraft (powerboat, sailboat, kayak or canoe) Cleanup')
CleanUsa$EventType[i]='Watercraft Cleanup'
if(CleanUsa$EventType[i]=='Marine Debris Accumulation Survey')
CleanUsa$EventType[i]='Marine Debris'
}
levels(factor(CleanUsa$EventType))
data = CleanUsa[ , c(5,6,7,8,9,11,13,14,19)]
data$log_item = log(data$TotalItems)
plot(data$TotalVolunteers, data$log_item)
# Regressors Implementation -----------------------------------------------
# WEEKEND : Dummy Variable
weekend = rep(0, dim(data)[1])
for (i in 1:dim(data)[1]) {
if(CleanUsa$DOW[i]=="Saturday"||CleanUsa$DOW[i]=="Sunday")
weekend[i]=1
}
# DOW info removed and substituted with weekend
data = data[ , -7]
data$weekend = weekend
# SEASONALITY : 4 Seasons
data$Season = rep('Winter', dim(data)[1])
data[which(data$Month %in% c('Mar', 'Apr', 'May')), 11] = 'Spring'
data[which(data$Month %in% c('Jun', 'Jul', 'Aug')), 11] = 'Summer'
data[which(data$Month %in% c('Sep', 'Oct', 'Nov')), 11] = 'Autumn'
# saving new dataset
save(data, file="RegData.Rdata")
# Analysis for Categorical Regressors -------------------------------------
# YEAR
cat = levels(factor(data$Year))
c = length(cat)
par(mfrow=c(2,c/2))
for (k in 1:c){
dati = data[which(data$Year == cat[k]), ]
plot(dati$TotalVolunteers, dati$log_item, main=cat[k])
}
# MONTH
cat = levels(factor(data$Month))
c = length(cat)
par(mfrow=c(2,c/2))
for (k in 1:c){
dati = data[which(data$Month == cat[k]), ]
plot(dati$TotalVolunteers, dati$log_item, main=cat[k])
}
# EVENT TYPE
cat = levels(factor(data$EventType))
c = length(cat)
par(mfrow=c(2,c/2))
for (k in 1:c){
dati = data[which(data$EventType == cat[k]), ]
plot(dati$TotalVolunteers, dati$log_item, main=cat[k])
}
# SEASON
cat = levels(factor(data$Season))
c = length(cat)
par(mfrow=c(2,c/2))
for (k in 1:c){
dati = data[which(data$Season == cat[k]), ]
plot(dati$TotalVolunteers, dati$log_item, main=cat[k])
}
# WEEKEND
cat = levels(factor(data$weekend))
c = length(cat)
par(mfrow=c(c/2,c))
for (k in 1:c){
dati = data[which(data$weekend == cat[k]), ]
plot(dati$TotalVolunteers, dati$log_item, main=cat[k])
}
dev.off()
# EventType con colori by cami
Land=data[which(data$EventType=='Land Cleanup'),]
Marine=data[which(data$EventType=='Marine Debris'),]
Under=data[which(data$EventType=='Underwater Cleanup'),]
Water=data[which(data$EventType=='Watercraft Cleanup'),]
plot(Land$TotalVolunteers, Land$log_item, pch=16, cex=0.5, col = 'forestgreen')
points(Marine$TotalVolunteers, Marine$log_item, pch=16, cex=0.5,col = 'gold')
points(Water$TotalVolunteers, Water$log_item, pch=16, cex=0.5, col = 'lightskyblue')
points(Under$TotalVolunteers, Under$log_item, pch=16, cex=0.5,col = 'firebrick3')
# Training vs Test Data ---------------------------------------------------
# We use data from 2016 & 2017 as training dataset for the models
# We then test the GOF of the model using 2018 data
test_data = data[which(data$Year == 2018), ]
train_data = data[which(data$Year == 2016 | data$Year == 2017), ]
# Natural Splines ---------------------------------------------------------
y = train_data$log_item
x = train_data$TotalVolunteers
knots = quantile(x, probs=c(seq(0.35, 0.95, by=0.1), 0.98, 0.99, 0.996))
boundary_knots <- quantile(x, probs=c(0.01, 0.999))
knots
boundary_knots
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ EventType + weekend + Season, data=train_data)
# plot considering TEST data (2018)
prova = test_data
preds = predict(model_ns, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season), se=T)
plot(prova$TotalVolunteers, prova$log_item, cex =.5, col="darkgrey", ylim=c(3,10),
main="Natural Splines", xlab='Total Volunteers', ylab='Collected Items')
points(prova$TotalVolunteers, preds$fit, pch=16, cex=.6, col ="red3")
# diagnostic : with regressor improved R2 + better fit
summary(model_ns)
x <- train_data$TotalVolunteers
y <- train_data$log_item
model_poly <- lm(y ~ poly(x , degree=8)+ EventType + weekend + Season, data=train_data)
# plot considering TEST data (2018)
prova = test_data
preds = predict(model_poly, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season), se=T)
plot(prova$TotalVolunteers, prova$log_item, cex =.5, col="darkgrey", ylim=c(3,10),
main="Polynomial Regression", xlab='Total Volunteers', ylab='Collected Items')
points(prova$TotalVolunteers, preds$fit, cex=.6, col ="blue", pch=16)
# diagnostic : with regressor improved R2 + better fit
summary(model_poly)
fit <- lm(y ~ poly(x , degree=8), data=data)
# plot
x.test = test_data$TotalVolunteers
y.test = test_data$log_item
x.grid <- seq(range(x.test)[1], range(x.test)[2], by=1)
preds <- predict(fit, list(x=x.grid), se=T)
plot(x.test, y.test ,xlim=range(x.grid) ,cex =.5, col =" darkgrey ",
main="Polynomial Regression", xlab='Total Volunteers', ylab='Collected Items')
lines(x.grid, preds$fit ,lwd=3, col ="deepskyblue")
se.bands <- cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
matlines(x.grid, se.bands, lwd =2, col ="blue", lty =3)
