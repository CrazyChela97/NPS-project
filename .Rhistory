residuals.H0EventType <- aov.H0EventType$residuals
# TEST OF FACTOR Seasonality ANF TEST OF FACTOR EventType
# p-values
B <- 1000
T_seasonality  <- T_EventType <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
Totalitems.perm.H0seasonality <- aov.H0seasonality$fitted + residuals.H0seasonality[permutation]
T_seasonality[perm] <- summary.aov(aov(Totalitems.perm.H0seasonality  ~ seasonality + EventType))[[1]][1,4]
Totalitems.perm.H0EventType <- aov.H0EventType$fitted + residuals.H0EventType[permutation]
T_EventType[perm] <- summary.aov(aov(Totalitems.perm.H0EventType ~ seasonality + EventType))[[1]][2,4]
}
sum(T_seasonality >= T0_seasonality)/B #seasonality significant
sum(T_EventType >= T0_EventType)/B #EventType significant
summary.aov(aov(North_America$ratio ~ seasonality + EventType + EventType_seasonality))
summary.aov(aov(North_America$ratio ~ seasonality + EventType + EventType_seasonality))
# Without interaction
summary.aov(aov(North_America$ratio ~ seasonality + EventType))
T0_EventType_seasonality <- summary.aov(aov(North_America$ratio ~ seasonality + EventType + EventType_seasonality))[[1]][3,4]
T0_EventType_seasonality
aov.H0EventType_seasonality <- aov(North_America$ratio ~ seasonality + EventType)
aov.H0EventType_seasonality
residuals.H0EventType_seasonality <- aov.H0EventType_seasonality$residuals
n <- length(North_America$TotalItems)
T_EventType_seasonality  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0EventType_seasonality <- residuals.H0EventType_seasonality[permutation]
TotalItems.perm.H0EventType_seasonality <- aov.H0EventType_seasonality$fitted + residuals.H0EventType_seasonality
T_EventType_seasonality[perm] <- summary.aov(aov(TotalItems.perm.H0EventType_seasonality ~ seasonality + EventType + EventType_seasonality))[[1]][3,4]
}
sum(T_EventType_seasonality >= T0_EventType_seasonality)/B #EventType_seasonality not significant
as.factor(Year)
#TWO-WAYS ANOVA
month_year=as.factor(North_America$Year):as.factor(North_America$Month)
month_year
summary.aov(aov(North_America$TotalItems ~ Year+ Month + month_year))
#TWO-WAYS ANOVA
Year=as.factor(North_America$Year)
Month=as.factor(North_America$Month)
month_year=as.factor(North_America$Year):as.factor(North_America$Month)
summary.aov(aov(North_America$TotalItems ~ Year+ Month + month_year))
Year=as.factor(North_America$Year)
Month=as.factor(North_America$Month)
month_year=as.factor(North_America$Year):as.factor(North_America$Month)
summary.aov(aov(North_America$TotalItems ~ Year+ Month + month_year))
# Without interaction
summary.aov(aov(North_America$TotalItems ~ Year+ Month + EventType))
T0_month_year <- summary.aov(aov(North_America$TotalItems ~ Year+ Month + month_year))[[1]][3,4]
T0_month_year
aov.H0T0_month_year <- aov(North_America$TotalItems ~ Year+ Month)
aov.H0T0_month_year
residuals.H0month_year <- aov.H0month_year$residuals
n <- length(North_America$TotalItems)
T_month_year  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0month_year <- residuals.H0month_year[permutation]
TotalItems.perm.H0month_year <- aov.H0month_year$fitted + residuals.H0month_year
T_month_year[perm] <- summary.aov(aov(TotalItems.perm.H0month_year ~ Year+ Month + month_year))[[1]][3,4]
}
sum(T_month_year >= T0_month_year)/B
# Without interaction
summary.aov(aov(North_America$TotalItems ~ Year+ Month + EventType))
T0_month_year <- summary.aov(aov(North_America$TotalItems ~ Year+ Month + month_year))[[1]][3,4]
T0_month_year
aov.H0month_year <- aov(North_America$TotalItems ~ Year+ Month)
aov.H0month_year
residuals.H0month_year <- aov.H0month_year$residuals
n <- length(North_America$TotalItems)
T_month_year  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0month_year <- residuals.H0month_year[permutation]
TotalItems.perm.H0month_year <- aov.H0month_year$fitted + residuals.H0month_year
T_month_year[perm] <- summary.aov(aov(TotalItems.perm.H0month_year ~ Year+ Month + month_year))[[1]][3,4]
}
sum(T_month_year >= T0_month_year)/B #month_year not significant
for(perm in 1:B){
permutation <- sample(n)
residuals.H0month_year <- residuals.H0month_year[permutation]
TotalItems.perm.H0month_year <- aov.H0month_year$fitted + residuals.H0month_year
T_month_year[perm] <- summary.aov(aov(TotalItems.perm.H0month_year ~ Year + Month + month_year))[[1]][3,4]
}
sum(T_month_year >= T0_month_year)/B #month_year not significant
# Without interaction
summary.aov(aov(North_America$TotalItems ~ Year+ Month + EventType))
summary.aov(aov(North_America$TotalItems ~ Year+ Month + month_year))
# Without interaction
summary.aov(aov(North_America$TotalItems ~ Year+ Month))
T0_month_year <- summary.aov(aov(North_America$TotalItems ~ Year + Month + month_year))[[1]][3,4]
T0_month_year
aov.H0month_year <- aov(North_America$TotalItems ~ Year+ Month)
aov.H0month_year
residuals.H0month_year <- aov.H0month_year$residuals
n <- length(North_America$TotalItems)
T_month_year  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0month_year <- residuals.H0month_year[permutation]
TotalItems.perm.H0month_year <- aov.H0month_year$fitted + residuals.H0month_year
T_month_year[perm] <- summary.aov(aov(TotalItems.perm.H0month_year ~ Year + Month + month_year))[[1]][3,4]
}
sum(T_month_year >= T0_month_year)/B #month_year significant
sum(T_month_year >= T0_month_year)/B #month_year significant se fissiamo alpha=0.05 o 0.1
B=500
T_month_year  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0month_year <- residuals.H0month_year[permutation]
TotalItems.perm.H0month_year <- aov.H0month_year$fitted + residuals.H0month_year
T_month_year[perm] <- summary.aov(aov(TotalItems.perm.H0month_year ~ Year + Month + month_year))[[1]][3,4]
}
sum(T_month_year >= T0_month_year)/B #month_year significant se fissiamo alpha=0.05 o 0.1
B=1000
fit <- aov(North_America$TotalItems ~ Year)
summary(fit)
T0 <- summary(fit)[[1]][1,4]
T0
B = 1000
seed = 26111992
T_stat <- numeric(B)
n <- length(North_America$seasonality)
fit_perm <- aov(North_America$TotalItems ~ Year)
for(perm in 1:B){
# Permutation:
permutation <- sample(1:n)
TotalItems <- North_America$TotalItems[permutation]
fit_perm <- aov(North_America$TotalItems ~ Year)
# Test statistic:
T_stat[perm] <- summary(fit_perm)[[1]][1,4]
}
p_val <- sum(T_stat>=T0)/B
p_val #seasonality NON significativa.
#MONTH
fit <- aov(North_America$TotalItems ~ Month)
summary(fit)
T0 <- summary(fit)[[1]][1,4]
T0
B = 1000
seed = 26111992
T_stat <- numeric(B)
n <- length(North_America$seasonality)
for(perm in 1:B){
# Permutation:
permutation <- sample(1:n)
TotalItems <- North_America$TotalItems[permutation]
fit_perm <- aov(North_America$TotalItems ~ Month)
# Test statistic:
T_stat[perm] <- summary(fit_perm)[[1]][1,4]
}
p_val <- sum(T_stat>=T0)/B
p_val #Year NON significativa.
seasonality
#YEAR\SEASONALITY
#TWO-WAYS ANOVA
seasonality_year=as.factor(seasonality):as.factor(North_America$Year)
seasonality_year
seasonality
#YEAR\SEASONALITY
#TWO-WAYS ANOVA
seasonality=as.factor(seasonality)
seasonality
Year
seasonality
#YEAR\SEASONALITY
#TWO-WAYS ANOVA
seasonality=as.factor(seasonality)
seasonality_year=as.factor(seasonality):as.factor(North_America$Year)
summary.aov(aov(North_America$TotalItems ~ Year + seasonality + seasonality_year))
# Without interaction
summary.aov(aov(North_America$TotalItems ~ Year + seasonality))
T0_seasonality_year <- summary.aov(aov(North_America$TotalItems ~ Year + seasonality + seasonality_year))[[1]][3,4]
T0_seasonality_year
aov.H0seasonality_year <- aov(North_America$TotalItems ~ Year + seasonality)
aov.H0seasonality_year
residuals.H0seasonality_year <- aov.H0seasonality_year$residuals
n <- length(North_America$TotalItems)
T_month_year  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0seasonality_year <- residuals.H0seasonality_year[permutation]
TotalItems.perm.H0seasonality_year <- aov.H0seasonality_year$fitted + residuals.H0seasonality_year
T_seasonality_year[perm] <- summary.aov(aov(TotalItems.perm.H0seasonality_year ~ Year + seasonality + seasonality_year))[[1]][3,4]
}
T_seasonality_year  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0seasonality_year <- residuals.H0seasonality_year[permutation]
TotalItems.perm.H0seasonality_year <- aov.H0seasonality_year$fitted + residuals.H0seasonality_year
T_seasonality_year[perm] <- summary.aov(aov(TotalItems.perm.H0seasonality_year ~ Year + seasonality + seasonality_year))[[1]][3,4]
}
sum(T_seasonality_year >= T0_seasonality_year)/B #month_year significant se fissiamo alpha=0.05 o 0.1
seasonality
seasonality=as.factor(seasonality)
fit <- aov(North_America$TotalItems ~ seasonality)
summary(fit)
T0 <- summary(fit)[[1]][1,4]
T0
B = 1000
seed = 26111992
T_stat <- numeric(B)
n <- length(North_America$seasonality)
for(perm in 1:B){
# Permutation:
permutation <- sample(1:n)
TotalItems <- North_America$TotalItems[permutation]
fit_perm <- aov(North_America$TotalItems ~ seasonality)
# Test statistic:
T_stat[perm] <- summary(fit_perm)[[1]][1,4]
}
p_val <- sum(T_stat>=T0)/B
p_val #seasonality NON significativa.
EventType
#TWO-WAYS ANOVA
EventType_seasonality=as.factor(seasonality):EventType
summary.aov(aov(North_America$TotalItems ~ seasonality + EventType + EventType_seasonality))
# Without interaction
summary.aov(aov(North_America$TotalItems ~ seasonality + EventType))
T0_EventType_seasonality <- summary.aov(aov(North_America$TotalItems ~ seasonality + EventType + EventType_seasonality))[[1]][3,4]
T0_EventType_seasonality
aov.H0EventType_seasonality <- aov(North_America$TotalItems ~ seasonality + EventType)
aov.H0EventType_seasonality
residuals.H0EventType_seasonality <- aov.H0EventType_seasonality$residuals
n <- length(North_America$TotalItems)
T_EventType_seasonality  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0EventType_seasonality <- residuals.H0EventType_seasonality[permutation]
TotalItems.perm.H0EventType_seasonality <- aov.H0EventType_seasonality$fitted + residuals.H0EventType_seasonality
T_EventType_seasonality[perm] <- summary.aov(aov(TotalItems.perm.H0EventType_seasonality ~ seasonality + EventType + EventType_seasonality))[[1]][3,4]
}
sum(T_EventType_seasonality >= T0_EventType_seasonality)/B #EventType_seasonality not significant
# TEST OF FACTOR Seasonality   (H0: alpha=0)
T0_seasonality <- summary.aov(aov(North_America$TotalItems ~ seasonality + EventType))[[1]][1,4]
# residuals under H0:
# TotalItems = mu + beta*EventType
aov.H0seasonality <- aov(North_America$TotalItems  ~  EventType)
residuals.H0seasonality <- aov.H0seasonality$residuals
# TEST OF FACTOR EventType   (H0: beta=0)
T0_EventType <- summary.aov(aov(North_America$TotalItems ~ seasonality + EventType))[[1]][2,4]
# residuals under H0:
# TotalItems = mu + alpha*seasonality
aov.H0EventType <- aov(North_America$TotalItems ~ seasonality)
residuals.H0EventType <- aov.H0EventType$residuals
# TEST OF FACTOR Seasonality ANF TEST OF FACTOR EventType
# p-values
B <- 1000
T_seasonality  <- T_EventType <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
Totalitems.perm.H0seasonality <- aov.H0seasonality$fitted + residuals.H0seasonality[permutation]
T_seasonality[perm] <- summary.aov(aov(Totalitems.perm.H0seasonality  ~ seasonality + EventType))[[1]][1,4]
Totalitems.perm.H0EventType <- aov.H0EventType$fitted + residuals.H0EventType[permutation]
T_EventType[perm] <- summary.aov(aov(Totalitems.perm.H0EventType ~ seasonality + EventType))[[1]][2,4]
}
sum(T_seasonality >= T0_seasonality)/B #seasonality significant
sum(T_EventType >= T0_EventType)/B #EventType significant
fit <- aov(cleandata$TotalItems ~ EventType)
summary(fit) #TotalItems indipendente da EventType usando ANOVA che però non possiamo usare perche ipotesi violate
#chiaramente non gaussiani, violazione ipotesi per ANOVA
EventType=as.factor(cleandata$EventType)
fit <- aov(cleandata$TotalItems ~ EventType)
summary(fit) #TotalItems indipendente da EventType usando ANOVA che però non possiamo usare perche ipotesi violate
library(rio)
library(roahd)
library(rgl)
library(MASS)
library(rgl)
library(DepthProc)
library(hexbin)
library(packagefinder)
library(aplpack)
library(robustbase)
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
cleandata=import("cleandata.Rdata")
cleandata=cleandata[which(cleandata$Year!="2015"),] #dataset finale 38953 osservazioni, 2015 ha solo  1411 osservazioni
dim(cleandata[which(cleandata$Year=="2016"),])[1] #9273 osservazioni nel 2016
dim(cleandata[which(cleandata$Year=="2017"),])[1] #12296 osservazioni nel 2016
dim(cleandata[which(cleandata$Year=="2018"),])[1] #17384 osservazioni nel 2016
#new dataset
stati = aggregate(cleandata$TotalItems, by=list(Country=cleandata$Country, month=cleandata$MonthNum, year=cleandata$Year), FUN=sum)
nomi_stati = levels(factor(cleandata$Country))
zeros = rep(0, length(nomi_stati))
stati_fda = data.frame(nomi_stati)
#dataframe stati/mesi
count = 1
for (y in 2016:2018){
for (i in 1:12){
stati_fda = cbind(stati_fda, zeros);
temp = stati[which(stati$month==i & stati$year==y), ]
index = match(temp$Country, stati_fda$nomi_stati)
stati_fda[index, count+1] = temp$x
count = count+1
}
}
names(stati_fda) =  as.character(c('Country', 1:(12*3)))
for (i in 1:127) {
x=0;
for (t in 1:36) {
if(stati_fda[i,1+t]!=0)
x=x+1;
}
if(x>=24)
zeros[i]=1
}
sum(zeros) #11 stati su 127 che hanno ALMENO 24 mesi su 36 (2 anni su 3) di dati
# plot functional data
matplot(t(stati_fda[ ,-1]), type='l')
North_America=cleandata[which(cleandata$Continent=='North America'),] #30108 dati su 38953 totali
subcountry = aggregate(North_America$TotalItems, by=list(SubCountry=North_America$SubCountry1, day=North_America$Day, month=North_America$MonthNum, year=North_America$Year), FUN=sum)
nomi_subcountry = levels(factor(North_America$SubCountry1))
zeros = rep(0, length(nomi_subcountry))
subcountry_fda = data.frame(nomi_subcountry)
#dataframe SubCountry/giorni
count = 1;
subcountry_fda = data.frame(matrix(0,nrow=263,ncol=1096))
subcountry_fda[,1]=data.frame(nomi_subcountry)
names(subcountry_fda) =  as.character(c('SubCountry', rep(c(1:31,1:28,1:31,1:30,1:31,1:30,1:31,1:31,1:30,1:31,1:30,1:31),3)))
for (y in 2016:2018){
for (x in 1:12){
if(x==1||x==3||x==5||x==3||x==7||x==8||x==10||x==12){
for (i in 1:31){
temp = subcountry[which(subcountry$day==i & subcountry$month==x & subcountry$year==y), ]
index = match(temp$SubCountry, subcountry_fda$SubCountry)
subcountry_fda[index, count+1] = temp$x
count = count+1
}}
if(x==2){
for (i in 1:28){
temp = subcountry[which(subcountry$day==i & subcountry$month==x & subcountry$year==y), ]
index = match(temp$SubCountry, subcountry_fda$SubCountry)
subcountry_fda[index, count+1] = temp$x
count = count+1
}}
if(x==4||x==6||x==9||x==11){
for (i in 1:30){
temp = subcountry[which(subcountry$day==i & subcountry$month==x & subcountry$year==y), ]
index = match(temp$SubCountry, subcountry_fda$SubCountry)
subcountry_fda[index, count+1] = temp$x
count = count+1
}}
}
}
data_fun = fData(1:(365*3), subcountry_fda[ ,-1])
plot(data_fun)
####Regression DATASET USA senza i 9235 outliers Y=TOTALITEMS
library(rio)
library(roahd)
library(rgl)
library(MASS)
library(rgl)
library(DepthProc)
library(hexbin)
library(packagefinder)
library(aplpack)
library(robustbase)
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
CleanUsa=import("CleanUsa.Rdata")
View(CleanUsa)
levels(as.factor(CleanUsa$EventType))
LandCleanup=CleanUsa[which(CleanUsa$EventType=='Land (beach, shoreline and inland) Cleanup'),] #14820
UnderwaterCleanup=CleanUsa[which(CleanUsa$EventType=='Underwater Cleanup'),] #54
WatercraftCleanup=CleanUsa[which(CleanUsa$EventType=='Watercraft (powerboat, sailboat, kayak or canoe) Cleanup'),] #231
MarineDebris=CleanUsa[which(CleanUsa$EventType=='Marine Debris Accumulation Survey'),] #848
par(mfrow=c(2,2))
plot(LandCleanup$TotalVolunteers,LandCleanup$TotalItems,main='Land Cleanup')
plot(UnderwaterCleanup$TotalVolunteers,UnderwaterCleanup$TotalItems,main='Underwater Cleanup')
plot(WatercraftCleanup$TotalVolunteers,WatercraftCleanup$TotalItems,main='Watercraft Cleanup')
plot(MarineDebris$TotalVolunteers,MarineDebris$TotalItems,main='Marine Debris')
dev.off()
# prova trasformazione dati
dati = CleanUsa
plot(dati$TotalVolunteers, dati$TotalItems)
new_TI = dati$TotalItems / dati$Area
plot(dati$TotalVolunteers, new_TI)
plot(dati$Area, dati$TotalItems)
plot(log(dati$Area), dati$TotalItems)
plot(log(dati$Area), log(dati$TotalItems))
plot(log(dati$Area), dati$TotalItems)
plot(dati$Area, dati$TotalItems)
plot(dati$TotalVolunteers, new_TI)
new_TI = dati$TotalItems / min(dati$Area,80)
plot(dati$TotalVolunteers, new_TI)
new_TI = dati$TotalItems / min(dati$Area,80)
min(dati$Area,80)
min(1,0)
new_TI = dati$TotalItems / minima(dati$Area,80)
min(c(0,0), c(1,1))
new_TI = dati$TotalItems / dati$Area
plot(dati$TotalVolunteers, new_TI)
plot(dati$TotalVolunteers, log(new_TI))
plot(log(dati$TotalVolunteers), log(new_TI))
plot(dati$TotalVolunteers, log(new_TI))
plot(sqrt(dati$TotalVolunteers), log(new_TI))
plot((dati$TotalVolunteers)^(1/3), log(new_TI))
plot((dati$TotalVolunteers)^(1/5), log(new_TI))
plot(sqrt(dati$TotalVolunteers), log(new_TI))
plot(sqrt(dati$TotalVolunteers), log10(new_TI))
plot(sqrt(dati$TotalVolunteers), log(new_TI))
plot(sqrt(dati$TotalVolunteers), sqrt(new_TI))
plot(sqrt(dati$TotalVolunteers), log(new_TI))
new_TI = sqrt(dati$TotalItems)
plot(dati$TotalVolunteers, new_TI)
plot(sqrt(dati$TotalVolunteers), new_TI)
plot((dati$TotalVolunteers)^(1/3), new_TI)
plot((dati$TotalVolunteers)^(1/10), new_TI)
plot(sqrt(dati$TotalVolunteers), new_TI)
new_TI = log(dati$TotalItems)
plot(sqrt(dati$TotalVolunteers), new_TI)
new_TI = sqrt(dati$TotalItems)
plot(sqrt(dati$TotalVolunteers), new_TI)
new_TI = dati$TotalItems / dati$TotalVolunteers
plot(dati$Area, new_TI)
plot(log(dati$Area), new_TI)
plot(log(dati$Area), log(new_TI))
plot(log(dati$Area), sqrt(new_TI))
plot(sqrt(dati$Area), sqrt(new_TI))
plot(log(dati$Area), sqrt(new_TI))
new_TI = dati$TotalItems / dati$Area
plot(sqrt(dati$TotalVolunteers), log(new_TI))
new_TI = sqrt(dati$TotalItems)
plot(sqrt(dati$TotalVolunteers), new_TI)
new_TI = dati$TotalItems / dati$TotalVolunteers
plot(log(dati$Area), sqrt(new_TI))
new_TI = sqrt(dati$TotalItems)
plot(sqrt(dati$TotalVolunteers), new_TI)
new_TI = dati$TotalItems / dati$Area
plot(sqrt(dati$TotalVolunteers), log(new_TI))
new_TI = log(dati$TotalItems)
plot(sqrt(dati$TotalVolunteers), new_TI)
new_TI = sqrt(dati$TotalItems)
plot(sqrt(dati$TotalVolunteers), new_TI)
plot(sqrt(dati$TotalVolunteers), log(new_TI))
plot(sqrt(dati$TotalVolunteers), new_TI)
new_TI = dati$TotalItems / dati$Area
plot(sqrt(dati$TotalVolunteers), log(new_TI))
plot(log(sqrt(dati$TotalVolunteers)), log(new_TI))
plot(sqrt(dati$TotalVolunteers), log(new_TI))
plot(sqrt(dati$TotalVolunteers), log(new_TI), xlim=c(0,15))
plot(dati$TotalVolunteers, dati$TotalItems)
plot(dati$Area, dati$TotalItems)
new_TI = dati$TotalItems / dati$Area
plot(sqrt(dati$TotalVolunteers), log(new_TI), xlim=c(0,15))
new_TI = sqrt(dati$TotalItems)
plot(sqrt(dati$TotalVolunteers), new_TI)
plot(log(sqrt(dati$TotalVolunteers)), log(new_TI))
plot(sqrt(dati$TotalVolunteers), new_TI)
par(mfrow=c(2,2))
plot(sqrt(LandCleanup$TotalVolunteers), sqrt(LandCleanup$TotalItems),main='Land Cleanup')
plot(sqrt(UnderwaterCleanup$TotalVolunteers), sqrt(UnderwaterCleanup$TotalItems),main='Underwater Cleanup')
plot(sqrt(WatercraftCleanup$TotalVolunteers), sqrt(WatercraftCleanup$TotalItems),main='Watercraft Cleanup')
plot(sqrt(MarineDebris$TotalVolunteers), sqrt(MarineDebris$TotalItems),main='Marine Debris')
# box-cox di entrambi
intermediate = powerTransform(dati$TotalItems ~ 1, family = "bcnPower")
# box-cox di entrambi
library(car)
intermediate = powerTransform(dati$TotalItems ~ 1, family = "bcnPower")
intermediate$lambda # circa 0 ~ log
TI_bc = bcnPower(dati$TotalItems, intermediate$lambda, gamma=intermediate$gamma)
intermediate = powerTransform(dati$TotalVolunteers ~ 1, family = "bcnPower")
intermediate$lambda # circa 0
TV_bc = bcnPower(dati$TotalVolunteers, intermediate$lambda, gamma=intermediate$gamma)
plot(TV_bc, TI_bc)
dev.off()
plot(TV_bc, TI_bc)
plot(dati$TotalVolunteers, TI_bc)
plot(sqrt(dati$TotalVolunteers), TI_bc)
plot(dati$TotalItems/dati$TotalVolunteers)
plot(dati$TotalItems/dati$TotalVolunteers>1)
plot(dati$TotalItems/dati$TotalVolunteers)
index = which(dati$TotalItems/dati$TotalVolunteers)
index = which(dati$TotalItems/dati$TotalVolunteers > 5)
plot(sqrt(dati$TotalVolunteers[index]), TI_bc[index])
plot(dati$TotalVolunteers[index], dati$TotalItems[index])
plot(sqrt(dati$TotalVolunteers[index]), log(new_TI[index]))
plot(sqrt(dati$TotalVolunteers[index]), new_TI[index])
plot(dati$Area[index], dati$TotalItems[index])
# considero solo missioni in cui ogni volontario ha raccolto (in media) almeno 5 items
# caso più realistico
plot(dati$TotalVolunteers[index], dati$TotalItems[index])
plot(dati$TotalVolunteers[index], log(new_TI[index]))
plot(sqrt(dati$TotalVolunteers[index]), log(new_TI[index]))
# normalizzazione dati per area
new_TI = dati$TotalItems / dati$Area
plot(sqrt(dati$TotalVolunteers[index]), log(new_TI[index]))
plot(dati$TotalVolunteers[index], log(new_TI[index]))
# sqrt di entrambe le quantità
new_TI = sqrt(dati$TotalItems)
plot(sqrt(dati$TotalVolunteers[index]), new_TI[index])
plot(sqrt(dati$TotalVolunteers[index]), TI_bc[index])
plot(dati$TotalVolunteers[index], TI_bc[index])
# sqrt di entrambe le quantità
new_TI = log(dati$TotalItems)
plot(sqrt(dati$TotalVolunteers[index]), new_TI[index])
plot(dati$TotalVolunteers[index], new_TI[index])
index = which(dati$TotalItems/dati$TotalVolunteers > 3)
# considero solo missioni in cui ogni volontario ha raccolto (in media) almeno 5 items
# caso più realistico
plot(dati$TotalVolunteers[index], dati$TotalItems[index])
# normalizzazione dati per area
new_TI = dati$TotalItems / dati$Area
plot(sqrt(dati$TotalVolunteers[index]), log(new_TI[index]))
# sqrt di entrambe le quantità
new_TI = log(dati$TotalItems)
plot(dati$TotalVolunteers[index], new_TI[index])
index = which(dati$TotalItems/dati$TotalVolunteers > 5)
# sqrt di entrambe le quantità
new_TI = log(dati$TotalItems)
plot(dati$TotalVolunteers[index], new_TI[index])
