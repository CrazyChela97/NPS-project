colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,     # segna la mediana
graph_params = list(cex=1, pch=1),
pmean = F     # segna la media
)
View(clean_data)
depthContour(
clean_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot')
bagplot(biv_data, show.whiskers = F, cex=0.8, main='Bagplot')
depthContour(
clean_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
#levels = 10,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(clean_data)
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
plot(clean_data[,1], clean_data[,2])
View(clean_data)
View(clean_data)
plot(clean_data$TotalVolunteers, clean_data$TotalItems)
plot(clean_data$TotalVolunteers, log(clean_data$TotalItems))
View(numerical_usa)
# Items vs Area
biv_data = numerical_usa[ , c(2,3)]
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
# data overview
plot(clean_data$Area, clean_data$TotalItems)
plot(clean_data$Area, log(clean_data$TotalItems))
# data overview
plot(clean_data$Area, clean_data$TotalItems)
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
rm(list=ls())
cleandata=import("cleandata.Rdata")
USA = cleandata[which(cleandata$Country=='USA'),]
numerical_usa = USA[ ,c(8,14,19)] # Items, Volontari, Area
# levo NA
numerical_usa = numerical_usa [-which(is.na(numerical_usa$Area) | is.na(numerical_usa$TotalVolunteers) |
is.na(numerical_usa$TotalItems)), ]
# levo quelli strani : se meno di 5 items a testa elimino
items_per_volunteer = numerical_usa$TotalItems/numerical_usa$TotalVolunteers
numerical_usa = numerical_usa[items_per_volunteer > 5, ]    # 4k obs in meno
# general overview
pairs(numerical_usa)
# molti outliers!  ->  tolgo i più palesi
numerical_usa = numerical_usa[which(numerical_usa$Area!=max(numerical_usa$Area)), ]
pairs(numerical_usa)
# Items vs Volunteers
biv_data = numerical_usa[ , c(1,2)]
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 50,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 1000,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
#colors = colorRampPalette(c('white', 'navy')),
levels = 100,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 100,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
depthContour(
clean_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 100,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
clean_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 50,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
clean_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 20,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
# Clean data overview
plot(clean_data$TotalVolunteers, clean_data$TotalItems)
plot(clean_data$TotalVolunteers, log(clean_data$TotalItems))
# Items vs Area
biv_data = numerical_usa[ , c(3,2)]
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 50,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
# data overview
plot(clean_data$Area, clean_data$TotalItems)
View(USA)
CleanUsa = USA[-ind_outliers,]
View(USA)
# Items vs Volunteers
biv_data = USA[ , c(8,14)]
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
# Items vs Area
biv_data = CleanUsa[ , c(3,2)]
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 50,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
View(CleanUsa)
CleanUsa = USA[-ind_outliers, ]
View(CleanUsa)
cleandata = import("cleandata.Rdata")
USA = cleandata[which(cleandata$Country=='USA'),]
numerical_usa = USA[ ,c(8,14,19)] # Items, Volontari, Area
# levo NA
numerical_usa = numerical_usa [-which(is.na(numerical_usa$Area) | is.na(numerical_usa$TotalVolunteers) |
is.na(numerical_usa$TotalItems)), ]
# levo quelli strani : se meno di 5 items a testa elimino
items_per_volunteer = numerical_usa$TotalItems/numerical_usa$TotalVolunteers
numerical_usa = numerical_usa[items_per_volunteer > 5, ]    # 4k obs in meno
# molti outliers!  ->  tolgo i più palesi
numerical_usa = numerical_usa[which(numerical_usa$Area!=max(numerical_usa$Area)), ]
# Items vs Volunteers
biv_data = USA[ , c(8,14)]
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
# Clean data overview
plot(clean_data$TotalVolunteers, clean_data$TotalItems)
plot(clean_data$TotalVolunteers, log(clean_data$TotalItems))
# levo NA
USA = USA [-which(is.na(numerical_usa$Area) | is.na(numerical_usa$TotalVolunteers) |
is.na(numerical_usa$TotalItems)), ]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) |
is.na(USA$TotalItems)), ]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) |
is.na(USA$TotalItems)), ]
USA = cleandata[which(cleandata$Country=='USA'),]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) |
is.na(USA$TotalItems)), ]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) |
is.na(USA$TotalItems)), ]
USA = cleandata[which(cleandata$Country=='USA'),]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) |
is.na(USA$TotalItems)), ]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) |
is.na(USA$TotalItems)), ]
USA = cleandata[which(cleandata$Country=='USA'),]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) | is.na(USA$TotalItems)), ]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) | is.na(USA$TotalItems)), ]
USA = cleandata[which(cleandata$Country=='USA'),]
# levo NA
USA = USA [- which(is.na(USA$Area) | is.na(USA$TotalVolunteers) | is.na(USA$TotalItems)), ]
which(is.na(USA$Area) | is.na(USA$TotalVolunteers) | is.na(USA$TotalItems))
# levo quelli strani : se meno di 5 items a testa elimino
items_per_volunteer = USA$TotalItems/USA$TotalVolunteers
numerical_usa = USA[items_per_volunteer > 5, ]    # 4k obs in meno
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
rm(list=ls())
cleandata = import("cleandata.Rdata")
USA = cleandata[which(cleandata$Country=='USA'),]
# levo NA
USA = USA [- which(is.na(USA$Area) | is.na(USA$TotalVolunteers) | is.na(USA$TotalItems)), ]
# levo quelli strani : se meno di 5 items a testa elimino
items_per_volunteer = USA$TotalItems/USA$TotalVolunteers
numerical_usa = USA[items_per_volunteer > 5, ]    # 4k obs in meno
USA = USA[items_per_volunteer > 5, ]    # 4k obs in meno
# general overview
numerical_usa = USA[ ,c(8,14,19)] # Items, Volontari, Area
pairs(numerical_usa)
# molti outliers!  ->  tolgo i più palesi
numerical_usa = numerical_usa[which(numerical_usa$Area!=max(numerical_usa$Area)), ]
pairs(numerical_usa)
# Items vs Volunteers
biv_data = USA[ , c(8,14)]
depthContour(
clean_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 20,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 20,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
# Clean data overview
plot(clean_data$TotalVolunteers, clean_data$TotalItems)
plot(clean_data$TotalVolunteers, log(clean_data$TotalItems))
CleanUsa = USA[-ind_outliers, ]
# Items vs Area
biv_data = CleanUsa[ , c(19,14)]
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 50,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
# data overview
plot(clean_data$Area, clean_data$TotalItems)
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
rm(list=ls())
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
rm(list=ls())
cleandata = import("cleandata.Rdata")
# View(cleandata)
USA = cleandata[which(cleandata$Country=='USA'),]
# levo NA
USA = USA [- which(is.na(USA$Area) | is.na(USA$TotalVolunteers) | is.na(USA$TotalItems)), ]
# levo quelli strani : se meno di 5 items a testa elimino
items_per_volunteer = USA$TotalItems/USA$TotalVolunteers
USA = USA[items_per_volunteer > 5, ]    # 4k obs in meno
# View(cleandata)
USA = cleandata[which(cleandata$Country=='USA'), ]
# levo NA
USA = USA [- which(is.na(USA$Area) | is.na(USA$TotalVolunteers) | is.na(USA$TotalItems)), ]
# levo quelli strani : se meno di 5 items a testa elimino
items_per_volunteer = USA$TotalItems/USA$TotalVolunteers
USA = USA[items_per_volunteer > 5, ]    # 4k obs in meno
# general overview
numerical_usa = USA[ ,c(8,14,19)] # Items, Volontari, Area
# molti outliers!  ->  tolgo i più palesi
numerical_usa = numerical_usa[which(numerical_usa$Area!=max(numerical_usa$Area)), ]
USA = USA[which(USA$Area!=max(USA$Area)), ]
# Items vs Volunteers
biv_data = USA[ , c(8,14)]
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
# Clean data overview
plot(clean_data$TotalVolunteers, clean_data$TotalItems)
plot(clean_data$TotalVolunteers, log(clean_data$TotalItems))
CleanUsa = USA[-ind_outliers, ]
# Items vs Area
biv_data = CleanUsa[ , c(19,14)]
# Bagplot
BP <- bagplot(biv_data)
# Bagplot
BP <- bagplot(biv_data, show.whiskers = F)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
bagplot(clean_data, show.whiskers = F, cex=0.6, main='Bagplot') # molto meglio
View(USA)
# data overview
plot(clean_data$Area, clean_data$TotalItems)
CleanUsa = CleanUsa[-ind_outliers, ]
# SAVING NEW DATASET
save(CleanUsa,file="cleanUSA.Rdata")
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
rm(list=ls())
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
rm(list=ls())
CleanUsa=import("CleanUsa.Rdata")
View(CleanUsa)
library(rio)
library(roahd)
library(rgl)
library(MASS)
library(rgl)
library(DepthProc)
library(hexbin)
library(packagefinder)
library(aplpack)
library(robustbase)
View(CleanUsa)
data = CleanUsa[ , c(5,6,7,8,9,11,13,14,19)]
data$log_item = log(data$TotalItems)
View(data)
for (i in 1:length(CleanUsa$EventType)) {
if(CleanUsa$EventType[i]=='Land (beach, shoreline and inland) Cleanup')
CleanUsa$EventType[i]='Land Cleanup'
if(CleanUsa$EventType[i]=='Watercraft (powerboat, sailboat, kayak or canoe) Cleanup')
CleanUsa$EventType[i]='Watercraft Cleanup'
if(CleanUsa$EventType[i]=='Marine Debris Accumulation Survey')
CleanUsa$EventType[i]='Marine Debris'
}
levels(factor(CleanUsa$EventType))
data = CleanUsa[ , c(5,6,7,8,9,11,13,14,19)]
data$log_item = log(data$TotalItems)
View(CleanUsa)
dim(data)[1]
weekend = rep(0, dim(data)[1])
for (i in 1:dim(data)[1]) {
if(CleanUsa$DOW[i]=="Saturday"||CleanUsa$DOW[i]=="Sunday")
weekend[i]=1
}
data$weekend = weekend
View(data)
data = CleanUsa[ , c(5,6,7,8,9,11,13,14,19)]
data$log_item = log(data$TotalItems)
# DOW info removed and substituted with weekend
data = data[ , -7]
data$weekend = weekend
# SEASONALITY : 4 Seasons
data$Season = rep('inv', dim(data)[1])
# SEASONALITY : 4 Seasons
data$Season = rep('winter', dim(data)[1])
levels(data$Month)
levels(factor(data$Month))
for (i in 1:dim(data)[1]) {
data[which(data$Month %in% c('Mar', 'Apr', 'May')), 11] = 'Spring'
data[which(data$Month %in% c('Jun', 'Jul', 'Aug')), 11] = 'Summer'
data[which(data$Month %in% c('Sep', 'Oct', 'Nov')), 11] = 'Spring'
}
data$Season = rep('winter', dim(data)[1])
data[which(data$Month %in% c('Mar', 'Apr', 'May')), 11] = 'Spring'
data[which(data$Month %in% c('Jun', 'Jul', 'Aug')), 11] = 'Summer'
data[which(data$Month %in% c('Sep', 'Oct', 'Nov')), 11] = 'Spring'
# SEASONALITY : 4 Seasons
data$Season = rep('Winter', dim(data)[1])
data[which(data$Month %in% c('Mar', 'Apr', 'May')), 11] = 'Spring'
data[which(data$Month %in% c('Jun', 'Jul', 'Aug')), 11] = 'Summer'
data[which(data$Month %in% c('Sep', 'Oct', 'Nov')), 11] = 'Spring'
library(ISLR2)
library(car)
library(mgcv)
library(splines)
library(pbapply)
gam_model = gam(log_item ~ s(TotalVolunteers, by=factor(EventType), bs='cr') + Area +
weekend + Season + as.factor(year), data=data)
gam_model = gam(log_item ~ s(TotalVolunteers, by=factor(EventType), bs='cr') + Area +
weekend + Season + as.factor(Year), data=data)
summary(gam_model)
# SEASONALITY : 4 Seasons
data$Season = rep('Winter', dim(data)[1])
data[which(data$Month %in% c('Mar', 'Apr', 'May')), 11] = 'Spring'
data[which(data$Month %in% c('Jun', 'Jul', 'Aug')), 11] = 'Summer'
data[which(data$Month %in% c('Sep', 'Oct', 'Nov')), 11] = 'Autumn'
gam_model = gam(log_item ~ s(TotalVolunteers, by=factor(EventType), bs='cr') + Area +
weekend + Season + as.factor(Year), data=data)
summary(gam_model)
plot(gam_model)
par(mfrow=c(2,2))
plot(gam_model)
plot(data$TotalVolunteers data$log_item)
dev.off()
plot(data$TotalVolunteers, data$log_item)
par(mfrow=c(2,2))
plot(gam_model)
prova = lm(log_item ~ TotalVolunteers, data=data)
plot(prova)
gam_model = gam(log_item ~ s(TotalVolunteers, by=factor(EventType), bs='cr'), data=data)
summary(gam_model)
par(mfrow=c(2,2))
plot(gam_model)
dev.off()
gam_model = gam(log_item ~ s(TotalVolunteers, by=factor(EventType), bs='cr'), data=data)
gam_model = gam(log_item ~ s(TotalVolunteers, by=factor(EventType), bs='cr') + Area +
weekend + Season + as.factor(Year), data=data)
plot(data$TotalVolunteers, data$log_item)
par(new=TRUE)
plot(model_gam, col='red')
plot(gam_model, col='red')
