<<<<<<< HEAD
T0_seasonality <- summary.aov(aov(North_America$TotalItems ~ seasonality + EventType))[[1]][1,4]
# residuals under H0:
# ratio = mu + beta*EventType
aov.H0seasonality <- aov(North_America$TotalItems  ~  EventType)
residuals.H0seasonality <- aov.H0seasonality$residuals
# TEST OF FACTOR EventType   (H0: beta=0)
T0_EventType <- summary.aov(aov(North_America$TotalItems ~ seasonality + EventType))[[1]][2,4]
# residuals under H0:
# ratio = mu + alpha*continent
aov.H0EventType <- aov(North_America$TotalItems ~ seasonality)
residuals.H0EventType <- aov.H0EventType$residuals
# TEST OF FACTOR Seasonality ANF TEST OF FACTOR EventType
# p-values
B <- 1000
T_seasonality  <- T_EventType <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
Totalitems.perm.H0seasonality <- aov.H0seasonality$fitted + residuals.H0seasonality[permutation]
T_seasonality[perm] <- summary.aov(aov(Totalitems.perm.H0seasonality  ~ seasonality + EventType))[[1]][1,4]
Totalitems.perm.H0EventType <- aov.H0EventType$fitted + residuals.H0EventType[permutation]
T_EventType[perm] <- summary.aov(aov(Totalitems.perm.H0EventType ~ seasonality + EventType))[[1]][2,4]
}
sum(T_seasonality >= T0_seasonality)/B #seasonality not significant
sum(T_EventType >= T0_EventType)/B #EventType not significant
10/100
fit <- aov(North_America$TotalItems ~ seasonality)
summary(fit)
T0 <- summary(fit)[[1]][1,4]
T0
B = 1000
seed = 26111992
T_stat <- numeric(B)
n <- length(North_America$seasonality)
for(perm in 1:B){
# Permutation:
permutation <- sample(1:n)
TotalItems <- North_America$TotalItems[permutation]
fit_perm <- aov(North_America$TotalItems ~ seasonality)
# Test statistic:
T_stat[perm] <- summary(fit_perm)[[1]][1,4]
}
p_val <- sum(T_stat>=T0)/B
p_val #seasonality NON significativa.
T0_seasonality <- summary.aov(aov(North_America$TotalItems ~ seasonality + EventType))[[1]][1,4]
# residuals under H0:
# TotalItems = mu + beta*EventType
aov.H0seasonality <- aov(North_America$TotalItems  ~  EventType)
residuals.H0seasonality <- aov.H0seasonality$residuals
# TEST OF FACTOR EventType   (H0: beta=0)
T0_EventType <- summary.aov(aov(North_America$TotalItems ~ seasonality + EventType))[[1]][2,4]
# residuals under H0:
# TotalItems = mu + alpha*seasonality
aov.H0EventType <- aov(North_America$TotalItems ~ seasonality)
residuals.H0EventType <- aov.H0EventType$residuals
# TEST OF FACTOR Seasonality ANF TEST OF FACTOR EventType
# p-values
B <- 1000
T_seasonality  <- T_EventType <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
Totalitems.perm.H0seasonality <- aov.H0seasonality$fitted + residuals.H0seasonality[permutation]
T_seasonality[perm] <- summary.aov(aov(Totalitems.perm.H0seasonality  ~ seasonality + EventType))[[1]][1,4]
Totalitems.perm.H0EventType <- aov.H0EventType$fitted + residuals.H0EventType[permutation]
T_EventType[perm] <- summary.aov(aov(Totalitems.perm.H0EventType ~ seasonality + EventType))[[1]][2,4]
}
sum(T_seasonality >= T0_seasonality)/B #seasonality significant
sum(T_EventType >= T0_EventType)/B #EventType significant
#se fissiamo alpha=0.05 seasonality e EventType sono significativi
# TEST OF FACTOR Seasonality   (H0: alpha=0)
T0_seasonality <- summary.aov(aov(North_America$ratio ~ seasonality + EventType))[[1]][1,4]
# residuals under H0:
# TotalItems = mu + beta*EventType
aov.H0seasonality <- aov(North_America$ratio  ~  EventType)
residuals.H0seasonality <- aov.H0seasonality$residuals
# TEST OF FACTOR EventType   (H0: beta=0)
T0_EventType <- summary.aov(aov(North_America$ratio ~ seasonality + EventType))[[1]][2,4]
# residuals under H0:
# TotalItems = mu + alpha*seasonality
aov.H0EventType <- aov(North_America$ratio ~ seasonality)
residuals.H0EventType <- aov.H0EventType$residuals
# TEST OF FACTOR Seasonality ANF TEST OF FACTOR EventType
# p-values
B <- 1000
T_seasonality  <- T_EventType <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
Totalitems.perm.H0seasonality <- aov.H0seasonality$fitted + residuals.H0seasonality[permutation]
T_seasonality[perm] <- summary.aov(aov(Totalitems.perm.H0seasonality  ~ seasonality + EventType))[[1]][1,4]
Totalitems.perm.H0EventType <- aov.H0EventType$fitted + residuals.H0EventType[permutation]
T_EventType[perm] <- summary.aov(aov(Totalitems.perm.H0EventType ~ seasonality + EventType))[[1]][2,4]
}
sum(T_seasonality >= T0_seasonality)/B #seasonality significant
sum(T_EventType >= T0_EventType)/B #EventType significant
summary.aov(aov(North_America$ratio ~ seasonality + EventType + EventType_seasonality))
summary.aov(aov(North_America$ratio ~ seasonality + EventType + EventType_seasonality))
# Without interaction
summary.aov(aov(North_America$ratio ~ seasonality + EventType))
T0_EventType_seasonality <- summary.aov(aov(North_America$ratio ~ seasonality + EventType + EventType_seasonality))[[1]][3,4]
T0_EventType_seasonality
aov.H0EventType_seasonality <- aov(North_America$ratio ~ seasonality + EventType)
aov.H0EventType_seasonality
residuals.H0EventType_seasonality <- aov.H0EventType_seasonality$residuals
n <- length(North_America$TotalItems)
T_EventType_seasonality  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0EventType_seasonality <- residuals.H0EventType_seasonality[permutation]
TotalItems.perm.H0EventType_seasonality <- aov.H0EventType_seasonality$fitted + residuals.H0EventType_seasonality
T_EventType_seasonality[perm] <- summary.aov(aov(TotalItems.perm.H0EventType_seasonality ~ seasonality + EventType + EventType_seasonality))[[1]][3,4]
}
sum(T_EventType_seasonality >= T0_EventType_seasonality)/B #EventType_seasonality not significant
as.factor(Year)
#TWO-WAYS ANOVA
month_year=as.factor(North_America$Year):as.factor(North_America$Month)
month_year
summary.aov(aov(North_America$TotalItems ~ Year+ Month + month_year))
#TWO-WAYS ANOVA
Year=as.factor(North_America$Year)
Month=as.factor(North_America$Month)
month_year=as.factor(North_America$Year):as.factor(North_America$Month)
summary.aov(aov(North_America$TotalItems ~ Year+ Month + month_year))
Year=as.factor(North_America$Year)
Month=as.factor(North_America$Month)
month_year=as.factor(North_America$Year):as.factor(North_America$Month)
summary.aov(aov(North_America$TotalItems ~ Year+ Month + month_year))
# Without interaction
summary.aov(aov(North_America$TotalItems ~ Year+ Month + EventType))
T0_month_year <- summary.aov(aov(North_America$TotalItems ~ Year+ Month + month_year))[[1]][3,4]
T0_month_year
aov.H0T0_month_year <- aov(North_America$TotalItems ~ Year+ Month)
aov.H0T0_month_year
residuals.H0month_year <- aov.H0month_year$residuals
n <- length(North_America$TotalItems)
T_month_year  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0month_year <- residuals.H0month_year[permutation]
TotalItems.perm.H0month_year <- aov.H0month_year$fitted + residuals.H0month_year
T_month_year[perm] <- summary.aov(aov(TotalItems.perm.H0month_year ~ Year+ Month + month_year))[[1]][3,4]
}
sum(T_month_year >= T0_month_year)/B
# Without interaction
summary.aov(aov(North_America$TotalItems ~ Year+ Month + EventType))
T0_month_year <- summary.aov(aov(North_America$TotalItems ~ Year+ Month + month_year))[[1]][3,4]
T0_month_year
aov.H0month_year <- aov(North_America$TotalItems ~ Year+ Month)
aov.H0month_year
residuals.H0month_year <- aov.H0month_year$residuals
n <- length(North_America$TotalItems)
T_month_year  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0month_year <- residuals.H0month_year[permutation]
TotalItems.perm.H0month_year <- aov.H0month_year$fitted + residuals.H0month_year
T_month_year[perm] <- summary.aov(aov(TotalItems.perm.H0month_year ~ Year+ Month + month_year))[[1]][3,4]
}
sum(T_month_year >= T0_month_year)/B #month_year not significant
for(perm in 1:B){
permutation <- sample(n)
residuals.H0month_year <- residuals.H0month_year[permutation]
TotalItems.perm.H0month_year <- aov.H0month_year$fitted + residuals.H0month_year
T_month_year[perm] <- summary.aov(aov(TotalItems.perm.H0month_year ~ Year + Month + month_year))[[1]][3,4]
}
sum(T_month_year >= T0_month_year)/B #month_year not significant
# Without interaction
summary.aov(aov(North_America$TotalItems ~ Year+ Month + EventType))
summary.aov(aov(North_America$TotalItems ~ Year+ Month + month_year))
# Without interaction
summary.aov(aov(North_America$TotalItems ~ Year+ Month))
T0_month_year <- summary.aov(aov(North_America$TotalItems ~ Year + Month + month_year))[[1]][3,4]
T0_month_year
aov.H0month_year <- aov(North_America$TotalItems ~ Year+ Month)
aov.H0month_year
residuals.H0month_year <- aov.H0month_year$residuals
n <- length(North_America$TotalItems)
T_month_year  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0month_year <- residuals.H0month_year[permutation]
TotalItems.perm.H0month_year <- aov.H0month_year$fitted + residuals.H0month_year
T_month_year[perm] <- summary.aov(aov(TotalItems.perm.H0month_year ~ Year + Month + month_year))[[1]][3,4]
}
sum(T_month_year >= T0_month_year)/B #month_year significant
sum(T_month_year >= T0_month_year)/B #month_year significant se fissiamo alpha=0.05 o 0.1
B=500
T_month_year  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0month_year <- residuals.H0month_year[permutation]
TotalItems.perm.H0month_year <- aov.H0month_year$fitted + residuals.H0month_year
T_month_year[perm] <- summary.aov(aov(TotalItems.perm.H0month_year ~ Year + Month + month_year))[[1]][3,4]
}
sum(T_month_year >= T0_month_year)/B #month_year significant se fissiamo alpha=0.05 o 0.1
B=1000
fit <- aov(North_America$TotalItems ~ Year)
summary(fit)
T0 <- summary(fit)[[1]][1,4]
T0
B = 1000
seed = 26111992
T_stat <- numeric(B)
n <- length(North_America$seasonality)
fit_perm <- aov(North_America$TotalItems ~ Year)
for(perm in 1:B){
# Permutation:
permutation <- sample(1:n)
TotalItems <- North_America$TotalItems[permutation]
fit_perm <- aov(North_America$TotalItems ~ Year)
# Test statistic:
T_stat[perm] <- summary(fit_perm)[[1]][1,4]
}
p_val <- sum(T_stat>=T0)/B
p_val #seasonality NON significativa.
#MONTH
fit <- aov(North_America$TotalItems ~ Month)
summary(fit)
T0 <- summary(fit)[[1]][1,4]
T0
B = 1000
seed = 26111992
T_stat <- numeric(B)
n <- length(North_America$seasonality)
for(perm in 1:B){
# Permutation:
permutation <- sample(1:n)
TotalItems <- North_America$TotalItems[permutation]
fit_perm <- aov(North_America$TotalItems ~ Month)
# Test statistic:
T_stat[perm] <- summary(fit_perm)[[1]][1,4]
}
p_val <- sum(T_stat>=T0)/B
p_val #Year NON significativa.
seasonality
#YEAR\SEASONALITY
#TWO-WAYS ANOVA
seasonality_year=as.factor(seasonality):as.factor(North_America$Year)
seasonality_year
seasonality
#YEAR\SEASONALITY
#TWO-WAYS ANOVA
seasonality=as.factor(seasonality)
seasonality
Year
seasonality
#YEAR\SEASONALITY
#TWO-WAYS ANOVA
seasonality=as.factor(seasonality)
seasonality_year=as.factor(seasonality):as.factor(North_America$Year)
summary.aov(aov(North_America$TotalItems ~ Year + seasonality + seasonality_year))
# Without interaction
summary.aov(aov(North_America$TotalItems ~ Year + seasonality))
T0_seasonality_year <- summary.aov(aov(North_America$TotalItems ~ Year + seasonality + seasonality_year))[[1]][3,4]
T0_seasonality_year
aov.H0seasonality_year <- aov(North_America$TotalItems ~ Year + seasonality)
aov.H0seasonality_year
residuals.H0seasonality_year <- aov.H0seasonality_year$residuals
n <- length(North_America$TotalItems)
T_month_year  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0seasonality_year <- residuals.H0seasonality_year[permutation]
TotalItems.perm.H0seasonality_year <- aov.H0seasonality_year$fitted + residuals.H0seasonality_year
T_seasonality_year[perm] <- summary.aov(aov(TotalItems.perm.H0seasonality_year ~ Year + seasonality + seasonality_year))[[1]][3,4]
}
T_seasonality_year  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0seasonality_year <- residuals.H0seasonality_year[permutation]
TotalItems.perm.H0seasonality_year <- aov.H0seasonality_year$fitted + residuals.H0seasonality_year
T_seasonality_year[perm] <- summary.aov(aov(TotalItems.perm.H0seasonality_year ~ Year + seasonality + seasonality_year))[[1]][3,4]
}
sum(T_seasonality_year >= T0_seasonality_year)/B #month_year significant se fissiamo alpha=0.05 o 0.1
seasonality
seasonality=as.factor(seasonality)
fit <- aov(North_America$TotalItems ~ seasonality)
summary(fit)
T0 <- summary(fit)[[1]][1,4]
T0
B = 1000
seed = 26111992
T_stat <- numeric(B)
n <- length(North_America$seasonality)
for(perm in 1:B){
# Permutation:
permutation <- sample(1:n)
TotalItems <- North_America$TotalItems[permutation]
fit_perm <- aov(North_America$TotalItems ~ seasonality)
# Test statistic:
T_stat[perm] <- summary(fit_perm)[[1]][1,4]
}
p_val <- sum(T_stat>=T0)/B
p_val #seasonality NON significativa.
EventType
#TWO-WAYS ANOVA
EventType_seasonality=as.factor(seasonality):EventType
summary.aov(aov(North_America$TotalItems ~ seasonality + EventType + EventType_seasonality))
# Without interaction
summary.aov(aov(North_America$TotalItems ~ seasonality + EventType))
T0_EventType_seasonality <- summary.aov(aov(North_America$TotalItems ~ seasonality + EventType + EventType_seasonality))[[1]][3,4]
T0_EventType_seasonality
aov.H0EventType_seasonality <- aov(North_America$TotalItems ~ seasonality + EventType)
aov.H0EventType_seasonality
residuals.H0EventType_seasonality <- aov.H0EventType_seasonality$residuals
n <- length(North_America$TotalItems)
T_EventType_seasonality  <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
residuals.H0EventType_seasonality <- residuals.H0EventType_seasonality[permutation]
TotalItems.perm.H0EventType_seasonality <- aov.H0EventType_seasonality$fitted + residuals.H0EventType_seasonality
T_EventType_seasonality[perm] <- summary.aov(aov(TotalItems.perm.H0EventType_seasonality ~ seasonality + EventType + EventType_seasonality))[[1]][3,4]
}
sum(T_EventType_seasonality >= T0_EventType_seasonality)/B #EventType_seasonality not significant
# TEST OF FACTOR Seasonality   (H0: alpha=0)
T0_seasonality <- summary.aov(aov(North_America$TotalItems ~ seasonality + EventType))[[1]][1,4]
# residuals under H0:
# TotalItems = mu + beta*EventType
aov.H0seasonality <- aov(North_America$TotalItems  ~  EventType)
residuals.H0seasonality <- aov.H0seasonality$residuals
# TEST OF FACTOR EventType   (H0: beta=0)
T0_EventType <- summary.aov(aov(North_America$TotalItems ~ seasonality + EventType))[[1]][2,4]
# residuals under H0:
# TotalItems = mu + alpha*seasonality
aov.H0EventType <- aov(North_America$TotalItems ~ seasonality)
residuals.H0EventType <- aov.H0EventType$residuals
# TEST OF FACTOR Seasonality ANF TEST OF FACTOR EventType
# p-values
B <- 1000
T_seasonality  <- T_EventType <- numeric(B)
for(perm in 1:B){
permutation <- sample(n)
Totalitems.perm.H0seasonality <- aov.H0seasonality$fitted + residuals.H0seasonality[permutation]
T_seasonality[perm] <- summary.aov(aov(Totalitems.perm.H0seasonality  ~ seasonality + EventType))[[1]][1,4]
Totalitems.perm.H0EventType <- aov.H0EventType$fitted + residuals.H0EventType[permutation]
T_EventType[perm] <- summary.aov(aov(Totalitems.perm.H0EventType ~ seasonality + EventType))[[1]][2,4]
}
sum(T_seasonality >= T0_seasonality)/B #seasonality significant
sum(T_EventType >= T0_EventType)/B #EventType significant
fit <- aov(cleandata$TotalItems ~ EventType)
summary(fit) #TotalItems indipendente da EventType usando ANOVA che però non possiamo usare perche ipotesi violate
#chiaramente non gaussiani, violazione ipotesi per ANOVA
EventType=as.factor(cleandata$EventType)
fit <- aov(cleandata$TotalItems ~ EventType)
summary(fit) #TotalItems indipendente da EventType usando ANOVA che però non possiamo usare perche ipotesi violate
=======
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,     # segna la mediana
graph_params = list(cex=1, pch=1),
pmean = F     # segna la media
)
View(clean_data)
depthContour(
clean_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot')
bagplot(biv_data, show.whiskers = F, cex=0.8, main='Bagplot')
depthContour(
clean_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
#levels = 10,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(clean_data)
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
plot(clean_data[,1], clean_data[,2])
View(clean_data)
View(clean_data)
plot(clean_data$TotalVolunteers, clean_data$TotalItems)
plot(clean_data$TotalVolunteers, log(clean_data$TotalItems))
View(numerical_usa)
# Items vs Area
biv_data = numerical_usa[ , c(2,3)]
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
# data overview
plot(clean_data$Area, clean_data$TotalItems)
plot(clean_data$Area, log(clean_data$TotalItems))
# data overview
plot(clean_data$Area, clean_data$TotalItems)
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
rm(list=ls())
cleandata=import("cleandata.Rdata")
USA = cleandata[which(cleandata$Country=='USA'),]
numerical_usa = USA[ ,c(8,14,19)] # Items, Volontari, Area
# levo NA
numerical_usa = numerical_usa [-which(is.na(numerical_usa$Area) | is.na(numerical_usa$TotalVolunteers) |
is.na(numerical_usa$TotalItems)), ]
# levo quelli strani : se meno di 5 items a testa elimino
items_per_volunteer = numerical_usa$TotalItems/numerical_usa$TotalVolunteers
numerical_usa = numerical_usa[items_per_volunteer > 5, ]    # 4k obs in meno
# general overview
pairs(numerical_usa)
# molti outliers!  ->  tolgo i più palesi
numerical_usa = numerical_usa[which(numerical_usa$Area!=max(numerical_usa$Area)), ]
pairs(numerical_usa)
# Items vs Volunteers
biv_data = numerical_usa[ , c(1,2)]
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 50,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 1000,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
#colors = colorRampPalette(c('white', 'navy')),
levels = 100,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 100,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
depthContour(
clean_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 100,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
clean_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 50,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
clean_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 20,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
# Clean data overview
plot(clean_data$TotalVolunteers, clean_data$TotalItems)
plot(clean_data$TotalVolunteers, log(clean_data$TotalItems))
# Items vs Area
biv_data = numerical_usa[ , c(3,2)]
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 50,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
# data overview
plot(clean_data$Area, clean_data$TotalItems)
View(USA)
CleanUsa = USA[-ind_outliers,]
View(USA)
# Items vs Volunteers
biv_data = USA[ , c(8,14)]
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
# Items vs Area
biv_data = CleanUsa[ , c(3,2)]
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 50,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
View(CleanUsa)
CleanUsa = USA[-ind_outliers, ]
View(CleanUsa)
cleandata = import("cleandata.Rdata")
USA = cleandata[which(cleandata$Country=='USA'),]
numerical_usa = USA[ ,c(8,14,19)] # Items, Volontari, Area
# levo NA
numerical_usa = numerical_usa [-which(is.na(numerical_usa$Area) | is.na(numerical_usa$TotalVolunteers) |
is.na(numerical_usa$TotalItems)), ]
# levo quelli strani : se meno di 5 items a testa elimino
items_per_volunteer = numerical_usa$TotalItems/numerical_usa$TotalVolunteers
numerical_usa = numerical_usa[items_per_volunteer > 5, ]    # 4k obs in meno
# molti outliers!  ->  tolgo i più palesi
numerical_usa = numerical_usa[which(numerical_usa$Area!=max(numerical_usa$Area)), ]
# Items vs Volunteers
biv_data = USA[ , c(8,14)]
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
# Clean data overview
plot(clean_data$TotalVolunteers, clean_data$TotalItems)
plot(clean_data$TotalVolunteers, log(clean_data$TotalItems))
# levo NA
USA = USA [-which(is.na(numerical_usa$Area) | is.na(numerical_usa$TotalVolunteers) |
is.na(numerical_usa$TotalItems)), ]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) |
is.na(USA$TotalItems)), ]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) |
is.na(USA$TotalItems)), ]
USA = cleandata[which(cleandata$Country=='USA'),]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) |
is.na(USA$TotalItems)), ]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) |
is.na(USA$TotalItems)), ]
USA = cleandata[which(cleandata$Country=='USA'),]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) |
is.na(USA$TotalItems)), ]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) |
is.na(USA$TotalItems)), ]
USA = cleandata[which(cleandata$Country=='USA'),]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) | is.na(USA$TotalItems)), ]
# levo NA
USA = USA [-which(is.na(USA$Area) | is.na(USA$TotalVolunteers) | is.na(USA$TotalItems)), ]
USA = cleandata[which(cleandata$Country=='USA'),]
# levo NA
USA = USA [- which(is.na(USA$Area) | is.na(USA$TotalVolunteers) | is.na(USA$TotalItems)), ]
which(is.na(USA$Area) | is.na(USA$TotalVolunteers) | is.na(USA$TotalItems))
# levo quelli strani : se meno di 5 items a testa elimino
items_per_volunteer = USA$TotalItems/USA$TotalVolunteers
numerical_usa = USA[items_per_volunteer > 5, ]    # 4k obs in meno
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
rm(list=ls())
cleandata = import("cleandata.Rdata")
USA = cleandata[which(cleandata$Country=='USA'),]
# levo NA
USA = USA [- which(is.na(USA$Area) | is.na(USA$TotalVolunteers) | is.na(USA$TotalItems)), ]
# levo quelli strani : se meno di 5 items a testa elimino
items_per_volunteer = USA$TotalItems/USA$TotalVolunteers
numerical_usa = USA[items_per_volunteer > 5, ]    # 4k obs in meno
USA = USA[items_per_volunteer > 5, ]    # 4k obs in meno
# general overview
numerical_usa = USA[ ,c(8,14,19)] # Items, Volontari, Area
pairs(numerical_usa)
# molti outliers!  ->  tolgo i più palesi
numerical_usa = numerical_usa[which(numerical_usa$Area!=max(numerical_usa$Area)), ]
pairs(numerical_usa)
# Items vs Volunteers
biv_data = USA[ , c(8,14)]
depthContour(
clean_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 20,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 20,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
# Clean data overview
plot(clean_data$TotalVolunteers, clean_data$TotalItems)
plot(clean_data$TotalVolunteers, log(clean_data$TotalItems))
CleanUsa = USA[-ind_outliers, ]
# Items vs Area
biv_data = CleanUsa[ , c(19,14)]
depthContour(
biv_data,
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 50,
pdmedian = F,     # segna la mediana
graph_params = list(cex=.01, pch=1),
pmean = F     # segna la media
)
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
# data overview
plot(clean_data$Area, clean_data$TotalItems)
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
rm(list=ls())
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
rm(list=ls())
cleandata = import("cleandata.Rdata")
# View(cleandata)
USA = cleandata[which(cleandata$Country=='USA'),]
# levo NA
USA = USA [- which(is.na(USA$Area) | is.na(USA$TotalVolunteers) | is.na(USA$TotalItems)), ]
# levo quelli strani : se meno di 5 items a testa elimino
items_per_volunteer = USA$TotalItems/USA$TotalVolunteers
USA = USA[items_per_volunteer > 5, ]    # 4k obs in meno
# View(cleandata)
USA = cleandata[which(cleandata$Country=='USA'), ]
# levo NA
USA = USA [- which(is.na(USA$Area) | is.na(USA$TotalVolunteers) | is.na(USA$TotalItems)), ]
# levo quelli strani : se meno di 5 items a testa elimino
items_per_volunteer = USA$TotalItems/USA$TotalVolunteers
USA = USA[items_per_volunteer > 5, ]    # 4k obs in meno
# general overview
numerical_usa = USA[ ,c(8,14,19)] # Items, Volontari, Area
# molti outliers!  ->  tolgo i più palesi
numerical_usa = numerical_usa[which(numerical_usa$Area!=max(numerical_usa$Area)), ]
USA = USA[which(USA$Area!=max(USA$Area)), ]
# Items vs Volunteers
biv_data = USA[ , c(8,14)]
# Bagplot
BP <- bagplot(biv_data)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
# Clean data overview
plot(clean_data$TotalVolunteers, clean_data$TotalItems)
plot(clean_data$TotalVolunteers, log(clean_data$TotalItems))
CleanUsa = USA[-ind_outliers, ]
# Items vs Area
biv_data = CleanUsa[ , c(19,14)]
# Bagplot
BP <- bagplot(biv_data)
# Bagplot
BP <- bagplot(biv_data, show.whiskers = F)
outlying_obs <- BP$pxy.outlier
ind_outliers <- which(apply(biv_data, 1, function(x) all(x %in% outlying_obs)))
clean_data <- biv_data[-ind_outliers, ]     # rimangono tipo metà delle osservazioni : è ok?
bagplot(clean_data, show.whiskers = F, cex=0.8, main='Bagplot') # molto meglio
bagplot(clean_data, show.whiskers = F, cex=0.6, main='Bagplot') # molto meglio
View(USA)
# data overview
plot(clean_data$Area, clean_data$TotalItems)
CleanUsa = CleanUsa[-ind_outliers, ]
# SAVING NEW DATASET
save(CleanUsa,file="cleanUSA.Rdata")
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
rm(list=ls())
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
rm(list=ls())
CleanUsa=import("CleanUsa.Rdata")
View(CleanUsa)
>>>>>>> 06309c3a91165a4a91a2cb6c6ed4722e46fcc3d8
library(rio)
library(roahd)
library(rgl)
library(MASS)
library(rgl)
library(DepthProc)
library(hexbin)
library(packagefinder)
library(aplpack)
library(robustbase)
View(CleanUsa)
data = CleanUsa[ , c(5,6,7,8,9,11,13,14,19)]
data$log_item = log(data$TotalItems)
View(data)
for (i in 1:length(CleanUsa$EventType)) {
if(CleanUsa$EventType[i]=='Land (beach, shoreline and inland) Cleanup')
CleanUsa$EventType[i]='Land Cleanup'
if(CleanUsa$EventType[i]=='Watercraft (powerboat, sailboat, kayak or canoe) Cleanup')
CleanUsa$EventType[i]='Watercraft Cleanup'
if(CleanUsa$EventType[i]=='Marine Debris Accumulation Survey')
CleanUsa$EventType[i]='Marine Debris'
}
levels(factor(CleanUsa$EventType))
data = CleanUsa[ , c(5,6,7,8,9,11,13,14,19)]
data$log_item = log(data$TotalItems)
View(CleanUsa)
dim(data)[1]
weekend = rep(0, dim(data)[1])
for (i in 1:dim(data)[1]) {
if(CleanUsa$DOW[i]=="Saturday"||CleanUsa$DOW[i]=="Sunday")
weekend[i]=1
}
data$weekend = weekend
View(data)
data = CleanUsa[ , c(5,6,7,8,9,11,13,14,19)]
data$log_item = log(data$TotalItems)
# DOW info removed and substituted with weekend
data = data[ , -7]
data$weekend = weekend
# SEASONALITY : 4 Seasons
data$Season = rep('inv', dim(data)[1])
# SEASONALITY : 4 Seasons
data$Season = rep('winter', dim(data)[1])
levels(data$Month)
levels(factor(data$Month))
for (i in 1:dim(data)[1]) {
data[which(data$Month %in% c('Mar', 'Apr', 'May')), 11] = 'Spring'
data[which(data$Month %in% c('Jun', 'Jul', 'Aug')), 11] = 'Summer'
data[which(data$Month %in% c('Sep', 'Oct', 'Nov')), 11] = 'Spring'
}
<<<<<<< HEAD
if(x>=24)
zeros[i]=1
}
sum(zeros) #11 stati su 127 che hanno ALMENO 24 mesi su 36 (2 anni su 3) di dati
# plot functional data
matplot(t(stati_fda[ ,-1]), type='l')
North_America=cleandata[which(cleandata$Continent=='North America'),] #30108 dati su 38953 totali
subcountry = aggregate(North_America$TotalItems, by=list(SubCountry=North_America$SubCountry1, day=North_America$Day, month=North_America$MonthNum, year=North_America$Year), FUN=sum)
nomi_subcountry = levels(factor(North_America$SubCountry1))
zeros = rep(0, length(nomi_subcountry))
subcountry_fda = data.frame(nomi_subcountry)
#dataframe SubCountry/giorni
count = 1;
subcountry_fda = data.frame(matrix(0,nrow=263,ncol=1096))
subcountry_fda[,1]=data.frame(nomi_subcountry)
names(subcountry_fda) =  as.character(c('SubCountry', rep(c(1:31,1:28,1:31,1:30,1:31,1:30,1:31,1:31,1:30,1:31,1:30,1:31),3)))
for (y in 2016:2018){
for (x in 1:12){
if(x==1||x==3||x==5||x==3||x==7||x==8||x==10||x==12){
for (i in 1:31){
temp = subcountry[which(subcountry$day==i & subcountry$month==x & subcountry$year==y), ]
index = match(temp$SubCountry, subcountry_fda$SubCountry)
subcountry_fda[index, count+1] = temp$x
count = count+1
}}
if(x==2){
for (i in 1:28){
temp = subcountry[which(subcountry$day==i & subcountry$month==x & subcountry$year==y), ]
index = match(temp$SubCountry, subcountry_fda$SubCountry)
subcountry_fda[index, count+1] = temp$x
count = count+1
}}
if(x==4||x==6||x==9||x==11){
for (i in 1:30){
temp = subcountry[which(subcountry$day==i & subcountry$month==x & subcountry$year==y), ]
index = match(temp$SubCountry, subcountry_fda$SubCountry)
subcountry_fda[index, count+1] = temp$x
count = count+1
}}
}
}
data_fun = fData(1:(365*3), subcountry_fda[ ,-1])
plot(data_fun)
####Regression DATASET USA senza i 9235 outliers Y=TOTALITEMS
library(rio)
install_formats()
####Regression DATASET USA senza i 9235 outliers Y=TOTALITEMS
library(rio)
library(roahd)
library(rgl)
library(MASS)
library(rgl)
library(DepthProc)
library(hexbin)
library(packagefinder)
library(aplpack)
library(robustbase)
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
CleanUsa=import("CleanUsa.Rdata")
View(CleanUsa)
min(CleanUsa$TotalVolunteers)
min(CleanUsa$TotalItems)
#grafici sui 4 tipi di evento
levels(as.factor(CleanUsa$EventType))
LandCleanup=CleanUsa[which(CleanUsa$EventType=='Land (beach, shoreline and inland) Cleanup'),] #14820
UnderwaterCleanup=CleanUsa[which(CleanUsa$EventType=='Underwater Cleanup'),] #54
WatercraftCleanup=CleanUsa[which(CleanUsa$EventType=='Watercraft (powerboat, sailboat, kayak or canoe) Cleanup'),] #231
MarineDebris=CleanUsa[which(CleanUsa$EventType=='Marine Debris Accumulation Survey'),] #848
par(mfrow=c(2,2))
plot(LandCleanup$TotalVolunteers,LandCleanup$TotalItems,main='Land Cleanup')
plot(UnderwaterCleanup$TotalVolunteers,UnderwaterCleanup$TotalItems,main='Underwater Cleanup')
plot(WatercraftCleanup$TotalVolunteers,WatercraftCleanup$TotalItems,main='Watercraft Cleanup')
plot(MarineDebris$TotalVolunteers,MarineDebris$TotalItems,main='Marine Debris')
for (i in 1:length(CleanUsa$EventType)) {
if(CleanUsa$EventType[i]=='Land (beach, shoreline and inland) Cleanup')
CleanUsa$EventType[i]='Land Cleanup'
if(CleanUsa$EventType[i]=='Watercraft (powerboat, sailboat, kayak or canoe) Cleanup')
CleanUsa$EventType[i]='Watercraft Cleanup'
if(CleanUsa$EventType[i]=='Marine Debris Accumulation Survey')
CleanUsa$EventType[i]='Marine Debris'
}
EventType=as.factor(CleanUsa$EventType)
weekend=rep(0,length(CleanUsa$Country))
for (i in 1:length(CleanUsa$Country)) {
if(CleanUsa$DOW[i]=="Saturday"||CleanUsa$DOW[i]=="Sunday")
weekend[i]=1
}
library(tibble)
CleanUsa=add_column(CleanUsa, weekend, .after = "DOW")
weekend=as.factor(CleanUsa$weekend)
seasonality=rep(0,length(CleanUsa$Country))
for (i in 1:length(CleanUsa$Country)) {
if(CleanUsa$Month[i]=="Jun"||CleanUsa$Month[i]=="Jul"||CleanUsa$Month[i]=="Aug")
seasonality[i]=1
}
CleanUsa=add_column(CleanUsa, seasonality, .after = "Month")
seasonality=as.factor(seasonality)
EventType_seasonality=as.factor(seasonality):EventType
Year=as.factor(CleanUsa$Year)
Month=as.factor(CleanUsa$Month)
###REGRESSION###
library(ISLR2)
library(car)
library(mgcv)
library(rgl)
library(splines)
library(pbapply)
model_gam_interaction=gam(CleanUsa$TotalItems ~ s(CleanUsa$TotalVolunteers,bs='cr') + EventType + weekend
+ seasonality + EventType_seasonality + Month + Year,data = CleanUsa)
summary(model_gam_interaction)
plot(model_gam_interaction)
model_gam=gam(CleanUsa$TotalItems ~ s(CleanUsa$TotalVolunteers,by=factor(EventType),bs='cr')  + weekend
+ Month + Year,data = CleanUsa)
summary(model_gam)
plot(model_gam,col='red')
graphics.off()
plot(model_gam_interaction)
plot(model_gam,col='red')
MarineDebris=CleanUsa[which(CleanUsa$EventType=='Marine Debris'),] #848
modelgamLandCleanup=gam(LandCleanup$TotalItems ~ s(LandCleanup$TotalVolunteers,bs='cr') + as.factor(LandCleanup$weekend) +
as.factor(LandCleanup$seasonality) + as.factor(LandCleanup$Month) + as.factor(LandCleanup$Year),data = LandCleanup)
summary(modelgamLandCleanup)
plot(LandCleanup$TotalVolunteers,LandCleanup$TotalItems)
par(new=TRUE)
plot(modelgamLandCleanup,col='red')
plot(modelgamLandCleanup,col='red')
modelgamLandCleanup=gam(LandCleanup$TotalItems ~ s(LandCleanup$TotalVolunteers,bs='cr') + as.factor(LandCleanup$weekend) +
as.factor(LandCleanup$seasonality) + as.factor(LandCleanup$Month) + as.factor(LandCleanup$Year),data = LandCleanup)
=======
data$Season = rep('winter', dim(data)[1])
data[which(data$Month %in% c('Mar', 'Apr', 'May')), 11] = 'Spring'
data[which(data$Month %in% c('Jun', 'Jul', 'Aug')), 11] = 'Summer'
data[which(data$Month %in% c('Sep', 'Oct', 'Nov')), 11] = 'Spring'
# SEASONALITY : 4 Seasons
data$Season = rep('Winter', dim(data)[1])
data[which(data$Month %in% c('Mar', 'Apr', 'May')), 11] = 'Spring'
data[which(data$Month %in% c('Jun', 'Jul', 'Aug')), 11] = 'Summer'
data[which(data$Month %in% c('Sep', 'Oct', 'Nov')), 11] = 'Spring'
library(ISLR2)
library(car)
library(mgcv)
library(splines)
library(pbapply)
gam_model = gam(log_item ~ s(TotalVolunteers, by=factor(EventType), bs='cr') + Area +
weekend + Season + as.factor(year), data=data)
gam_model = gam(log_item ~ s(TotalVolunteers, by=factor(EventType), bs='cr') + Area +
weekend + Season + as.factor(Year), data=data)
summary(gam_model)
# SEASONALITY : 4 Seasons
data$Season = rep('Winter', dim(data)[1])
data[which(data$Month %in% c('Mar', 'Apr', 'May')), 11] = 'Spring'
data[which(data$Month %in% c('Jun', 'Jul', 'Aug')), 11] = 'Summer'
data[which(data$Month %in% c('Sep', 'Oct', 'Nov')), 11] = 'Autumn'
gam_model = gam(log_item ~ s(TotalVolunteers, by=factor(EventType), bs='cr') + Area +
weekend + Season + as.factor(Year), data=data)
summary(gam_model)
plot(gam_model)
par(mfrow=c(2,2))
plot(gam_model)
plot(data$TotalVolunteers data$log_item)
dev.off()
plot(data$TotalVolunteers, data$log_item)
par(mfrow=c(2,2))
plot(gam_model)
prova = lm(log_item ~ TotalVolunteers, data=data)
plot(prova)
gam_model = gam(log_item ~ s(TotalVolunteers, by=factor(EventType), bs='cr'), data=data)
summary(gam_model)
par(mfrow=c(2,2))
plot(gam_model)
dev.off()
gam_model = gam(log_item ~ s(TotalVolunteers, by=factor(EventType), bs='cr'), data=data)
gam_model = gam(log_item ~ s(TotalVolunteers, by=factor(EventType), bs='cr') + Area +
weekend + Season + as.factor(Year), data=data)
plot(data$TotalVolunteers, data$log_item)
par(new=TRUE)
plot(model_gam, col='red')
plot(gam_model, col='red')
>>>>>>> 06309c3a91165a4a91a2cb6c6ed4722e46fcc3d8
