points(boundary_knots, boundary_pred, col='red', pch=19)
# Natural Splines ---------------------------------------------------------
knots = quantile(x, probs=c(seq(0.25, 0.95, by=0.1), 0.975, 0.997))
boundary_knots <- quantile(x, probs=c(0.01, 0.999))
knots
boundary_knots
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots))
# plot
x.grid <- seq(range(x)[1], range(x)[2], by=0.5)
preds = predict(model_ns, list(x=x.grid), se=T)
plot(x, y, xlim=range(x.grid), cex =.5, col="darkgrey")
lines(x.grid, preds$fit, lwd =2, col ="blue")
se.bands = cbind(preds$fit + 2*preds$se.fit , preds$fit - 2*preds$se.fit)
matlines(x.grid, se.bands, lwd =1, col ="blue", lty =3)
# visualize knots
knots_pred = predict(model_ns, list(x=knots))
points(knots, knots_pred, col='blue', pch=19)
boundary_pred = predict(model_ns, list(x=boundary_knots))
points(boundary_knots, boundary_pred, col='red', pch=19)
# Natural Splines ---------------------------------------------------------
knots = quantile(x, probs=c(seq(0.25, 0.95, by=0.1), 0.975, 0.995))
boundary_knots <- quantile(x, probs=c(0.01, 0.999))
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots))
# plot
x.grid <- seq(range(x)[1], range(x)[2], by=0.5)
preds = predict(model_ns, list(x=x.grid), se=T)
plot(x, y, xlim=range(x.grid), cex =.5, col="darkgrey")
lines(x.grid, preds$fit, lwd =2, col ="blue")
se.bands = cbind(preds$fit + 2*preds$se.fit , preds$fit - 2*preds$se.fit)
matlines(x.grid, se.bands, lwd =1, col ="blue", lty =3)
# visualize knots
knots_pred = predict(model_ns, list(x=knots))
points(knots, knots_pred, col='blue', pch=19)
boundary_pred = predict(model_ns, list(x=boundary_knots))
points(boundary_knots, boundary_pred, col='red', pch=19)
# diagnostic
summary(model_ns)
# Natural Splines ---------------------------------------------------------
knots = quantile(x, probs=c(seq(0.25, 0.95, by=0.1), 0.975, 0.99, 0.997))
boundary_knots <- quantile(x, probs=c(0.01, 0.999))
knots
boundary_knots
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots))
# plot
x.grid <- seq(range(x)[1], range(x)[2], by=0.5)
preds = predict(model_ns, list(x=x.grid), se=T)
plot(x, y, xlim=range(x.grid), cex =.5, col="darkgrey")
lines(x.grid, preds$fit, lwd =2, col ="blue")
se.bands = cbind(preds$fit + 2*preds$se.fit , preds$fit - 2*preds$se.fit)
matlines(x.grid, se.bands, lwd =1, col ="blue", lty =3)
# visualize knots
knots_pred = predict(model_ns, list(x=knots))
points(knots, knots_pred, col='blue', pch=19)
boundary_pred = predict(model_ns, list(x=boundary_knots))
points(boundary_knots, boundary_pred, col='red', pch=19)
# diagnostic
summary(model_ns)
# Natural Splines ---------------------------------------------------------
knots = quantile(x, probs=c(seq(0.25, 0.95, by=0.1), seq(0.965, 0.995, by=0.01)))
boundary_knots <- quantile(x, probs=c(0.01, 0.999))
knots
boundary_knots
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots))
# plot
x.grid <- seq(range(x)[1], range(x)[2], by=0.5)
preds = predict(model_ns, list(x=x.grid), se=T)
plot(x, y, xlim=range(x.grid), cex =.5, col="darkgrey")
lines(x.grid, preds$fit, lwd =2, col ="blue")
se.bands = cbind(preds$fit + 2*preds$se.fit , preds$fit - 2*preds$se.fit)
matlines(x.grid, se.bands, lwd =1, col ="blue", lty =3)
# visualize knots
knots_pred = predict(model_ns, list(x=knots))
points(knots, knots_pred, col='blue', pch=19)
boundary_pred = predict(model_ns, list(x=boundary_knots))
points(boundary_knots, boundary_pred, col='red', pch=19)
# Natural Splines ---------------------------------------------------------
knots = quantile(x, probs=c(seq(0.25, 0.95, by=0.1), seq(0.975, 0.995, by=0.01)))
boundary_knots <- quantile(x, probs=c(0.01, 0.999))
knots
boundary_knots
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots))
# plot
x.grid <- seq(range(x)[1], range(x)[2], by=0.5)
preds = predict(model_ns, list(x=x.grid), se=T)
plot(x, y, xlim=range(x.grid), cex =.5, col="darkgrey")
lines(x.grid, preds$fit, lwd =2, col ="blue")
se.bands = cbind(preds$fit + 2*preds$se.fit , preds$fit - 2*preds$se.fit)
matlines(x.grid, se.bands, lwd =1, col ="blue", lty =3)
# visualize knots
knots_pred = predict(model_ns, list(x=knots))
points(knots, knots_pred, col='blue', pch=19)
boundary_pred = predict(model_ns, list(x=boundary_knots))
points(boundary_knots, boundary_pred, col='red', pch=19)
# diagnostic
summary(model_ns)
# Natural Splines ---------------------------------------------------------
knots = quantile(x, probs=c(seq(0.25, 0.95, by=0.1), 0.98, 0.99, 0.995))
boundary_knots <- quantile(x, probs=c(0.01, 0.999))
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots))
# diagnostic
summary(model_ns)
# plot
x.grid <- seq(range(x)[1], range(x)[2], by=0.5)
preds = predict(model_ns, list(x=x.grid), se=T)
plot(x, y, xlim=range(x.grid), cex =.5, col="darkgrey")
lines(x.grid, preds$fit, lwd =2, col ="blue")
se.bands = cbind(preds$fit + 2*preds$se.fit , preds$fit - 2*preds$se.fit)
matlines(x.grid, se.bands, lwd =1, col ="blue", lty =3)
# visualize knots
knots_pred = predict(model_ns, list(x=knots))
points(knots, knots_pred, col='blue', pch=19)
boundary_pred = predict(model_ns, list(x=boundary_knots))
points(boundary_knots, boundary_pred, col='red', pch=19)
# Natural Splines ---------------------------------------------------------
knots = quantile(x, probs=c(seq(0.25, 0.95, by=0.1), 0.98, 0.99, 0.996))
boundary_knots <- quantile(x, probs=c(0.01, 0.999))
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots))
# plot
x.grid <- seq(range(x)[1], range(x)[2], by=0.5)
preds = predict(model_ns, list(x=x.grid), se=T)
plot(x, y, xlim=range(x.grid), cex =.5, col="darkgrey")
lines(x.grid, preds$fit, lwd =2, col ="blue")
se.bands = cbind(preds$fit + 2*preds$se.fit , preds$fit - 2*preds$se.fit)
matlines(x.grid, se.bands, lwd =1, col ="blue", lty =3)
# visualize knots
knots_pred = predict(model_ns, list(x=knots))
points(knots, knots_pred, col='blue', pch=19)
boundary_pred = predict(model_ns, list(x=boundary_knots))
points(boundary_knots, boundary_pred, col='red', pch=19)
# diagnostic
summary(model_ns)
par(mfrow=c(2,2))
plot(fit7)
fit7 = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots))
# diagnostic
summary(fit7)
par(mfrow=c(2,2))
plot(fit7)
# aggiungo regressori
area_std = CleanUsa$Area/round(mean(CleanUsa$Area))
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ as.factor(EventType) + weekend + Season, offset=area_std, data=data)
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ as.factor(EventType) + weekend + Season, offset=area_std, data=train_data)
as.factor(EventType)
View(train_data)
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ EventType + weekend + Season, offset=area_std, data=train_data)
View(train_data)
y = train_data$log_item
x = train_data$TotalVolunteers
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ EventType + weekend + Season, offset=area_std, data=train_data)
View(train_data)
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ EventType + weekend + Season, data=train_data)
summary(model_ns)
prova = test_data[100:200, ]
preds = predict(model_ns, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season), se=T)
se.bands = cbind(preds$fit + 2*preds$se.fit , preds$fit - 2*preds$se.fit)
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
dev.off()
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, se.bands[,1], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, se.bands[,2], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# visualize knots
knots_pred = predict(model_ns, list(x=knots))
points(knots, knots_pred, col='blue', pch=19)
boundary_pred = predict(model_ns, list(x=boundary_knots))
points(boundary_knots, boundary_pred, col='red', pch=19)
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, se.bands[,1], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, se.bands[,2], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# errore
err = sum(abs(prova$log_item - preds$fit))
err
# errore
err = sum(abs(prova$log_item - preds$fit))/len(prova$log_item)
# errore
err = sum(abs(prova$log_item - preds$fit))/length(prova$log_item)
err
prova = test_data[200:300, ]
preds = predict(model_ns, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season), se=T)
se.bands = cbind(preds$fit + 2*preds$se.fit , preds$fit - 2*preds$se.fit)
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, se.bands[,1], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, se.bands[,2], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# errore
mean_err = sum(abs(prova$log_item - preds$fit))/length(prova$log_item)
mean_err
prova = test_data
preds = predict(model_ns, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season), se=T)
se.bands = cbind(preds$fit + 2*preds$se.fit , preds$fit - 2*preds$se.fit)
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, se.bands[,1], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, se.bands[,2], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# errore
mean_err = sum(abs(prova$log_item - preds$fit))/length(prova$log_item)
mean_err
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ EventType + weekend + Season, data=train_data)  # offset=area_std
par(mfrow=c(2,2))
plot(model_ns)
rm(list=ls())
# Data Transformation -----------------------------------------------------
CleanUsa=import("CleanUsa.Rdata")
View(CleanUsa)
for (i in 1:length(CleanUsa$EventType)) {
if(CleanUsa$EventType[i]=='Land (beach, shoreline and inland) Cleanup')
CleanUsa$EventType[i]='Land Cleanup'
if(CleanUsa$EventType[i]=='Watercraft (powerboat, sailboat, kayak or canoe) Cleanup')
CleanUsa$EventType[i]='Watercraft Cleanup'
if(CleanUsa$EventType[i]=='Marine Debris Accumulation Survey')
CleanUsa$EventType[i]='Marine Debris'
}
levels(factor(CleanUsa$EventType))
data = CleanUsa[ , c(5,6,7,8,9,11,13,14,19,20)]
data$log_item = log(data$TotalItems)
plot(data$TotalVolunteers, data$log_item)
# WEEKEND : Dummy Variable
weekend = rep(0, dim(data)[1])
for (i in 1:dim(data)[1]) {
if(CleanUsa$DOW[i]=="Saturday"||CleanUsa$DOW[i]=="Sunday")
weekend[i]=1
}
# DOW info removed and substituted with weekend
data = data[ , -7]
data$weekend = weekend
# SEASONALITY : 4 Seasons
data$Season = rep('Winter', dim(data)[1])
data[which(data$Month %in% c('Mar', 'Apr', 'May')), 11] = 'Spring'
data[which(data$Month %in% c('Jun', 'Jul', 'Aug')), 11] = 'Summer'
data[which(data$Month %in% c('Sep', 'Oct', 'Nov')), 11] = 'Autumn'
test_data = data[which(data$Year == 2018), ]
train_data = data[which(data$Year == 2016 | data$Year == 2017), ]
# WEEKEND : Dummy Variable
weekend = rep(0, dim(data)[1])
for (i in 1:dim(data)[1]) {
if(CleanUsa$DOW[i]=="Saturday"||CleanUsa$DOW[i]=="Sunday")
weekend[i]=1
}
# DOW info removed and substituted with weekend
data = data[ , -7]
data$weekend = weekend
View(data)
rm(list=ls())
# Data Transformation -----------------------------------------------------
CleanUsa=import("CleanUsa.Rdata")
for (i in 1:length(CleanUsa$EventType)) {
if(CleanUsa$EventType[i]=='Land (beach, shoreline and inland) Cleanup')
CleanUsa$EventType[i]='Land Cleanup'
if(CleanUsa$EventType[i]=='Watercraft (powerboat, sailboat, kayak or canoe) Cleanup')
CleanUsa$EventType[i]='Watercraft Cleanup'
if(CleanUsa$EventType[i]=='Marine Debris Accumulation Survey')
CleanUsa$EventType[i]='Marine Debris'
}
levels(factor(CleanUsa$EventType))
data = CleanUsa[ , c(5,6,7,8,9,11,13,14,19,20)]
data$log_item = log(data$TotalItems)
plot(data$TotalVolunteers, data$log_item)
# WEEKEND : Dummy Variable
weekend = rep(0, dim(data)[1])
for (i in 1:dim(data)[1]) {
if(CleanUsa$DOW[i]=="Saturday"||CleanUsa$DOW[i]=="Sunday")
weekend[i]=1
}
# DOW info removed and substituted with weekend
data = data[ , -7]
View(data)
data$weekend = weekend
# SEASONALITY : 4 Seasons
data$Season = rep('Winter', dim(data)[1])
data[which(data$Month %in% c('Mar', 'Apr', 'May')), 11] = 'Spring'
data[which(data$Month %in% c('Mar', 'Apr', 'May')), 12] = 'Spring'
data[which(data$Month %in% c('Jun', 'Jul', 'Aug')), 12] = 'Summer'
data[which(data$Month %in% c('Sep', 'Oct', 'Nov')), 12] = 'Autumn'
test_data = data[which(data$Year == 2018), ]
train_data = data[which(data$Year == 2016 | data$Year == 2017), ]
round(mean(train_data$Area))
round(mean(test_data$Area))
# Adding AREA variable as offset variable
area_std = train_data$Area/20
train_data$Area_std = Area_std
train_data$Area_std = area_std
area_std = test_data$Area/20
test_data$Area_std = area_std
# new model
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ EventType + weekend + Season, offset = Area_std, data=train_data)
# Natural Splines ---------------------------------------------------------
y = train_data$log_item
x = train_data$TotalVolunteers
knots = quantile(x, probs=c(seq(0.25, 0.95, by=0.1), 0.98, 0.99, 0.996))
boundary_knots <- quantile(x, probs=c(0.01, 0.999))
# new model
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ EventType + weekend + Season, offset = Area_std, data=train_data)
# plot considering TEST data (2018)
prova = test_data
preds = predict(model_ns, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season, Area_std=prova$Area_std), se=T)
se.bands = cbind(preds$fit + 2*preds$se.fit , preds$fit - 2*preds$se.fit)
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
dev.off()
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, se.bands[,1], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, se.bands[,2], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# diagnostic : with regressor improved R2 + better fit
summary(model_ns)
par(mfrow=c(2,2))
plot(model_ns)
# errore medio su tutti i dati test
mean_err = sum(abs(prova$log_item - preds$fit))/length(prova$log_item)
mean_err # 0.74 circa
# Adding AREA variable as offset variable
area_std = train_data$Area/21
train_data$Area_std = area_std
area_std = test_data$Area/21
test_data$Area_std = area_std
# new model
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ EventType + weekend + Season, offset = Area_std, data=train_data)
# plot considering TEST data (2018)
prova = test_data
preds = predict(model_ns, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season, Area_std=prova$Area_std), se=T)
se.bands = cbind(preds$fit + 2*preds$se.fit , preds$fit - 2*preds$se.fit)
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, se.bands[,1], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, se.bands[,2], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# diagnostic : with regressor improved R2 + better fit
summary(model_ns)
# Adding AREA variable as offset variable
area_std = train_data$Area/25
train_data$Area_std = area_std
area_std = test_data$Area/25
test_data$Area_std = area_std
# new model
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ EventType + weekend + Season, offset = Area_std, data=train_data)
# plot considering TEST data (2018)
prova = test_data
preds = predict(model_ns, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season, Area_std=prova$Area_std), se=T)
se.bands = cbind(preds$fit + 2*preds$se.fit , preds$fit - 2*preds$se.fit)
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, se.bands[,1], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, se.bands[,2], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# diagnostic : with regressor improved R2 + better fit
summary(model_ns)
par(mfrow=c(2,2))
plot(model_ns)
# errore medio su tutti i dati test
mean_err = sum(abs(prova$log_item - preds$fit))/length(prova$log_item)
mean_err # 0.74 circa
# Adding AREA variable as offset variable
area_std = train_data$Area/30
train_data$Area_std = area_std
area_std = test_data$Area/30
test_data$Area_std = area_std
# new model
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ EventType + weekend + Season, offset = Area_std, data=train_data)
# plot considering TEST data (2018)
prova = test_data
preds = predict(model_ns, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season, Area_std=prova$Area_std), se=T)
se.bands = cbind(preds$fit + 2*preds$se.fit , preds$fit - 2*preds$se.fit)
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, se.bands[,1], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, se.bands[,2], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# diagnostic : with regressor improved R2 + better fit
summary(model_ns)
par(mfrow=c(2,2))
plot(model_ns)
dev.off()
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, se.bands[,1], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, se.bands[,2], cex=.3, col ="red", pch=16)
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# diagnostic : with regressor improved R2 + better fit
summary(model_ns)
par(mfrow=c(2,2))
plot(model_ns)
# Adding AREA variable as offset variable
area_std = train_data$Area/35
train_data$Area_std = area_std
area_std = test_data$Area/35
test_data$Area_std = area_std
# new model
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ EventType + weekend + Season, offset = Area_std, data=train_data)
# plot considering TEST data (2018)
prova = test_data
preds = predict(model_ns, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season, Area_std=prova$Area_std), se=T)
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# diagnostic : with regressor improved R2 + better fit
summary(model_ns)
par(mfrow=c(2,2))
plot(model_ns)
sd(train_data$Area)
mean(train_data$Area)
range(train_data$Area)
range(test_data$Area)
# Adding AREA variable as offset variable
area_std = train_data$Area/40
train_data$Area_std = area_std
area_std = test_data$Area/40
test_data$Area_std = area_std
# new model
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ EventType + weekend + Season, offset = Area_std, data=train_data)
# plot considering TEST data (2018)
prova = test_data
preds = predict(model_ns, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season, Area_std=prova$Area_std), se=T)
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# diagnostic : with regressor improved R2 + better fit
summary(model_ns)
par(mfrow=c(2,2))
plot(model_ns)
# Adding AREA variable as offset variable
area_std = train_data$Area/50
train_data$Area_std = area_std
area_std = test_data$Area/50
test_data$Area_std = area_std
# new model
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ EventType + weekend + Season, offset = Area_std, data=train_data)
# plot considering TEST data (2018)
prova = test_data
preds = predict(model_ns, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season, Area_std=prova$Area_std), se=T)
dev.off()
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# diagnostic : with regressor improved R2 + better fit
summary(model_ns)
par(mfrow=c(2,2))
plot(model_ns)
dev.off()
# errore medio su tutti i dati test
mean_err = sum(abs(prova$log_item - preds$fit))/length(prova$log_item)
mean_err # 0.74 circa
model_ns = lm(y ~ ns(x, knots=knots, Boundary.knots=boundary_knots)
+ EventType + weekend + Season, data=train_data)
# plot considering TEST data (2018)
prova = test_data
preds = predict(model_ns, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season), se=T)
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# diagnostic : with regressor improved R2 + better fit
summary(model_ns)
par(mfrow=c(2,2))
plot(model_ns)
dev.off()
# errore medio su tutti i dati test
mean_err = sum(abs(prova$log_item - preds$fit))/length(prova$log_item)
mean_err # 0.74 circa
x <- train_data$TotalVolunteers
y <- train_data$log_item
fit <- lm(y ~ poly(x , degree=8)+ EventType + weekend + Season, data=train_data)
model_poly <- lm(y ~ poly(x , degree=8)+ EventType + weekend + Season, data=train_data)
# plot considering TEST data (2018)
prova = test_data
preds = predict(model_poly, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season), se=T)
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# diagnostic : with regressor improved R2 + better fit
summary(model_poly)
par(mfrow=c(2,2))
plot(model_poly)
# errore medio su tutti i dati test
mean_err = sum(abs(prova$log_item - preds$fit))/length(prova$log_item)
mean_err # 0.79 circa
dev.off()
preds = predict(model_poly, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season), se=T)
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
preds = predict(model_ns, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season, Area_std=prova$Area_std), se=T)
plot(prova$TotalVolunteers, prova$log_item, cex =.8, col="darkgrey", ylim=c(2,10))
points(prova$TotalVolunteers, preds$fit, cex=.8, col ="blue")
# diagnostic : with regressor improved R2 + better fit
summary(model_ns) # R2 = 0.578 , Radj = 577
preds = predict(model_ns, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season), se=T)
# errore medio su tutti i dati test
mean_err = sum(abs(prova$log_item - preds$fit))/length(prova$log_item)
mean_err # 0.74 circa
preds = predict(model_poly, list(x=prova$TotalVolunteers, EventType=prova$EventType,
weekend=prova$weekend, Season=prova$Season), se=T)
# errore medio su tutti i dati test
mean_err = sum(abs(prova$log_item - preds$fit))/length(prova$log_item)
mean_err # 0.74 circa
